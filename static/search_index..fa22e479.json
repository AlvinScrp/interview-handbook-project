[{"id":0,"title":"HM - 鸿蒙-应用程序开发","routePath":"/interview-handbook-project/guide/app","lang":"","toc":[{"text":"路由与生命周期","id":"路由与生命周期","depth":2,"charIndex":3},{"text":"1. 路由-常用API","id":"1-路由-常用api","depth":3,"charIndex":14},{"text":"2. 路由-参数传递","id":"2-路由-参数传递","depth":3,"charIndex":1133},{"text":"3. UIAbility-生命周期","id":"3-uiability-生命周期","depth":3,"charIndex":2107},{"text":"4. 组件-生命周期","id":"4-组件-生命周期","depth":3,"charIndex":2661},{"text":"5. UIAbility跳转","id":"5-uiability跳转","depth":3,"charIndex":3130},{"text":"使用动画","id":"使用动画","depth":2,"charIndex":3668},{"text":"1. 属性动画","id":"1-属性动画","depth":3,"charIndex":3676},{"text":"2. 显示动画","id":"2-显示动画","depth":3,"charIndex":4485},{"text":"3. 元素共享转场","id":"3-元素共享转场","depth":3,"charIndex":5396},{"text":"4. 拖动手势-阻尼和磁吸","id":"4-拖动手势-阻尼和磁吸","depth":3,"charIndex":6486},{"text":"原生能力","id":"原生能力","depth":2,"charIndex":6503},{"text":"1. 数据管理-用户首选项","id":"1-数据管理-用户首选项","depth":3,"charIndex":6511},{"text":"2. 安全-程序访问控制","id":"2-安全-程序访问控制","depth":3,"charIndex":6528},{"text":"3. 绘画能力-画布组件","id":"3-绘画能力-画布组件","depth":3,"charIndex":6544},{"text":"4. 公共事件与通知-通知管理","id":"4-公共事件与通知-通知管理","depth":3,"charIndex":6560},{"text":"5. 后台任务-后台代理提醒","id":"5-后台任务-后台代理提醒","depth":3,"charIndex":6579},{"text":"今日案例-华为闹钟","id":"今日案例-华为闹钟","depth":2,"charIndex":6597},{"text":"1. 页面结构-首页结构","id":"1-页面结构-首页结构","depth":3,"charIndex":6610},{"text":"2. 页面结构-绘制闹钟","id":"2-页面结构-绘制闹钟","depth":3,"charIndex":6626},{"text":"3. 页面结构-绘制闹钟任务列表","id":"3-页面结构-绘制闹钟任务列表","depth":3,"charIndex":6642},{"text":"4. 页面结构-详情页","id":"4-页面结构-详情页","depth":3,"charIndex":6662},{"text":"5. 业务逻辑-渲染闹钟任务列表","id":"5-业务逻辑-渲染闹钟任务列表","depth":3,"charIndex":6677},{"text":"6. 业务逻辑-跳转详情并渲染","id":"6-业务逻辑-跳转详情并渲染","depth":3,"charIndex":6697},{"text":"7. 业务逻辑-添加&修改闹钟任务","id":"7-业务逻辑-添加修改闹钟任务","depth":3,"charIndex":6716},{"text":"8. 业务逻辑-删除闹钟任务","id":"8-业务逻辑-删除闹钟任务","depth":3,"charIndex":6737},{"text":"10. 业务逻辑-停止和开启闹钟任务","id":"10-业务逻辑-停止和开启闹钟任务","depth":3,"charIndex":-1}],"domain":"","content":"#\n\n\n路由与生命周期#\n\n\n1. 路由-常用API#\n\n> 如何新建页面，如何跳转和回退操作\n\n1）新建页面\n\n@Entry\n@Component\nstruct DetailPage {\n  build() {\n    Column({ space: 15 }) {\n      Text('Detail Page')\n        .fontSize(40)\n      Button('Back')\n    }\n    .height('100%')\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n{\n  \"src\": [\n    \"pages/Index\",\n+    \"pages/DetailPage\"\n  ]\n}\n\n\nTIP\n * 手动新建一个页面（ets）文件，需要在 main_pages.json 中手动配置\n * 可以自动创建\n\n2）跳转与后退 API\n\n * 跳转 router.pushUrl()\n * 后退 router.back()\n * 替换跳转 router.replaceUrl()\n\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column({ space: 15 }) {\n      Text('Index Page')\n        .fontSize(40)\n      Button('Jump To Detail Page')\n        .onClick(() => {\n          // 1. 跳转，压入页面栈顶部\n          // router.pushUrl({\n          //   url: 'pages/DetailPage'\n          // })\n\n          // 2. 跳转，替换当前页面栈\n          // router.replaceUrl({\n          //   url: 'pages/DetailPage'\n          // })\n\n          // 3. 返回\n          // router.back()\n        })\n    }\n    .height('100%')\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\nTIP\n * 页面栈的最大容量为32个页面。如果超过这个限制，可以调用 router.clear() 方法清空历史页面栈，释放内存空间。\n\n\n2. 路由-参数传递#\n\n> 页面参数传递和获取\n\n1）传参\n\n\n\nclass User {\n  name: string\n  age: number\n}\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  user: User = {\n    name: 'jack',\n    age: 18\n  }\n\n  build() {\n    Column({ space: 15 }) {\n      Text('Index Page')\n        .fontSize(40)\n      Button('Jump To Detail Page')\n        .onClick(() => {\n          router.pushUrl({\n            url: 'pages/DetailPage',\n            params: this.user\n          })\n        })\n    }\n    .height('100%')\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n2）获取\n\n\n\n@Entry\n@Component\nstruct DetailPage {\n\n  aboutToAppear() {\n    const params = router.getParams()\n    promptAction.showToast({ message: params['name'] + params['age'] })\n  }\n\n  build() {\n    Column({ space: 15 }) {\n      Text('Detail Page')\n        .fontSize(40)\n      Button('Back')\n        .onClick(() => {\n          router.back()\n        })\n    }\n    .height('100%')\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n\n3. UIAbility-生命周期#\n\n> 当用户打开、切换和返回到对应应用时，应用中的UIAbility实例会在其生命周期的不同状态之间转换。\n\n 1. UIAbility实例创建完成时触发，系统会调用 onCreate() 回调。\n    \n    * 可以在该回调中进行应用初始化操作，例如变量定义资源加载等，用于后续的UI界面展示。\n\n 2. onForeground() 回调，在 UIAbility 的UI界面可见之前，如 UIAbility 切换至前台时触发。\n    \n    * 可以在 onForeground() 回调中申请系统需要的资源，或者重新申请在 onBackground() 中释放的资源。\n\n 3. onBackground() 回调，在 UIAbility 的UI界面完全不可见之后，如 UIAbility 切换至后台时候触发。\n    \n    * 可以在 onBackground() 回调中释放UI界面不可见时无用的资源，或者在此回调中执行较为耗时的操作，例如状态保存等\n\n 4. Destroy 状态在 UIAbility 实例销毁时触发，系统会调用 onDestroy() 回调。\n    \n    * 可以在该回调中进行系统资源的释放、数据的保存等操作。\n\n\n4. 组件-生命周期#\n\n1）任何组件\n\naboutToAppear\n\n * aboutToAppear 函数在创建自定义组件的新实例后，在执行其 build 函数之前执行。\n * 允许在 aboutToAppear 函数中改变状态变量，更改将在后续执行 build 函数中生效。\n\naboutToDisappear\n\n * aboutToDisappear 函数在自定义组件析构销毁之前执行。\n\n * 不允许在 aboutToDisappear 函数中改变状态变量，特别是 @Link 变量的修改可能会导致应用程序行为不稳定。\n\n2）仅页面 @Entry 组件\n\nonPageShow\n\n * 页面每次显示时触发一次，包括路由过程、应用进入前后台等场景，仅 @Entry 修饰的自定义组件生效。\n\nonPageHide\n\n * 页面每次隐藏时触发一次，包括路由过程、应用进入前后台等场景，仅 @Entry 修饰的自定义组件生效。\n\nonBackPress\n\n * 当用户点击返回按钮时触发，仅 @Entry 修饰的自定义组件生效。\n\n\n5. UIAbility跳转#\n\n> UIAbility组件是一种包含UI界面的应用组件，主要用于和用户交互\n\n * UIAbility组件是系统调度的基本单元，为应用提供绘制界面的窗口；\n * 一个UIAbility组件中可以通过多个页面来实现一个功能模块；\n * 每一个UIAbility组件实例，都对应于一个最近任务列表中的任务。\n\nButton('Jump To PayAbility Page')\n  .onClick(() => {\n    const context = getContext(this) as common.UIAbilityContext\n    const want: Want = {\n      bundleName: 'com.itcast.myapplication',\n      abilityName: 'PayAbility'\n    }\n    context.startAbility(want)\n  })\n\n\nButton('Back')\n  .onClick(() => {\n    router.back()\n  })\n\n\nTIP\n * 后续消息通知跳转到应用也需要跳转到对应的 UIAbility 方式类似\n\n\n使用动画#\n\n\n1. 属性动画#\n\n> 组件的某些通用属性变化时，可以通过属性动画实现渐变过渡效果，提升用户体验。\n\n * 支持的属性包括width、height、backgroundColor、opacity、scale、rotate、translate等。\n\n@Entry\n@Component\nstruct Index {\n  @State\n  widthSize: number = 100\n  @State\n  heightSize: number = 40\n\n  build() {\n    Column({ space: 15 }) {\n      Button('元素动画')\n        .width(this.widthSize)\n        .height(this.heightSize)\n        .onClick(() => {\n          this.widthSize = 200\n          this.heightSize = 100\n        })\n        .animation({\n          // 动画时间\n          duration: 1000,\n          // 执行次数\n          iterations: -1,\n          // 动画曲线\n          curve: Curve.Ease,\n          // 延时时间\n          delay: 1000,\n          // 播放模式\n          playMode: PlayMode.Alternate\n        })\n    }\n    .height('100%')\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n\n2. 显示动画#\n\n> 提供全局animateTo显式动画接口来指定由于闭包代码导致的状态变化插入过渡动效。\n\n\n@Entry\n@Component\nstruct Index {\n  @State\n  show: boolean = true\n\n  build() {\n    Column({ space: 15 }) {\n      Column() {\n        Row() {\n          Text('一级菜单')\n            .fontColor('#fff')\n            .height(50)\n        }\n        .onClick(() => {\n          animateTo({\n            duration: 200,\n            onFinish: () => {\n              // 动画结束\n              promptAction.showToast({ message: 'finish' })\n            }\n          },() => {\n            this.show = !this.show\n          })\n        })\n\n        if (this.show) {\n          Column() {\n            Text('二级菜单')\n              .fontColor('#fff')\n              .height(50)\n            Text('二级菜单')\n              .fontColor('#fff')\n              .height(50)\n          }\n        }\n      }\n      .width(100)\n      .backgroundColor('#069')\n    }\n    .height('100%')\n    .width('100%')\n  }\n}\n\n\n\n3. 元素共享转场#\n\n> 当路由进行切换时，可以通过设置组件的 sharedTransition 属性将该元素标记为共享元素并设置对应的共享元素转场动效。\n\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row({ space: 15 }) {\n      Column({ space: 10 }){\n        Image($rawfile('apple.png'))\n          .width('100%')\n          .aspectRatio(1)\n          .sharedTransition('apple', { duration: 500 })\n        Text('鸣春谷 正宗甘肃特产花牛水果苹果 【天水直发】 4.5-5斤中果A(约13-16个)')\n          .sharedTransition('text', { duration: 500 })\n      }\n      .padding(15)\n      .width('50%')\n      .onClick(() => {\n        router.pushUrl({\n          url: 'pages/DetailPage'\n        })\n      })\n    }\n    .width('100%')\n  }\n}\n\n\n@Entry\n@Component\nstruct DetailPage {\n  build() {\n    Column({ space: 15 }) {\n      Column({ space: 10 }){\n        Image($rawfile('apple.png'))\n          .width('100%')\n          .aspectRatio(1)\n          .sharedTransition('apple', { duration: 500 })\n        Text('鸣春谷 正宗甘肃特产花牛水果苹果 【天水直发】 4.5-5斤中果A(约13-16个)')\n          .fontSize(18)\n          .sharedTransition('text', { duration: 500 })\n      }\n      .padding(15)\n    }\n    .height('100%')\n    .width('100%')\n  }\n}\n\n\n\n4. 拖动手势-阻尼和磁吸#\n\n\n原生能力#\n\n\n1. 数据管理-用户首选项#\n\n\n2. 安全-程序访问控制#\n\n\n3. 绘画能力-画布组件#\n\n\n4. 公共事件与通知-通知管理#\n\n\n5. 后台任务-后台代理提醒#\n\n\n今日案例-华为闹钟#\n\n\n1. 页面结构-首页结构#\n\n\n2. 页面结构-绘制闹钟#\n\n\n3. 页面结构-绘制闹钟任务列表#\n\n\n4. 页面结构-详情页#\n\n\n5. 业务逻辑-渲染闹钟任务列表#\n\n\n6. 业务逻辑-跳转详情并渲染#\n\n\n7. 业务逻辑-添加&修改闹钟任务#\n\n\n8. 业务逻辑-删除闹钟任务#\n\n\n10. 业务逻辑-停止和开启闹钟任务#","frontmatter":{"title":"HM - 鸿蒙-应用程序开发"},"version":""},{"id":1,"title":"HM - 鸿蒙-组件基础","routePath":"/interview-handbook-project/guide/","lang":"","toc":[{"text":"开发环境","id":"开发环境","depth":2,"charIndex":3},{"text":"1. 起步-鸿蒙简介","id":"1-起步-鸿蒙简介","depth":3,"charIndex":11},{"text":"2. 起步-DevEco Studio","id":"2-起步-deveco-studio","depth":3,"charIndex":510},{"text":"3. 起步-HelloWorld","id":"3-起步-helloworld","depth":3,"charIndex":795},{"text":"4. 起步-效果预览","id":"4-起步-效果预览","depth":3,"charIndex":881},{"text":"5. 起步-工程结构","id":"5-起步-工程结构","depth":3,"charIndex":1580},{"text":"组件基础","id":"组件基础","depth":2,"charIndex":1761},{"text":"1. 组件-什么是ArkTS","id":"1-组件-什么是arkts","depth":3,"charIndex":1769},{"text":"2. 基础-组件结构","id":"2-基础-组件结构","depth":3,"charIndex":2292},{"text":"3. 基础-系统组件(ArkUI)","id":"3-基础-系统组件arkui","depth":3,"charIndex":3131},{"text":"4. 基础-组件状态","id":"4-基础-组件状态","depth":3,"charIndex":3644},{"text":"样式处理","id":"样式处理","depth":2,"charIndex":5093},{"text":"1. 样式-语法(链式&枚举)","id":"1-样式-语法链式枚举","depth":3,"charIndex":5101},{"text":"2. 样式-单位vp和适配","id":"2-样式-单位vp和适配","depth":3,"charIndex":5733},{"text":"2. 样式-@Styles 复用","id":"2-样式-styles-复用","depth":3,"charIndex":8893},{"text":"3. 样式-@Extends 复用","id":"3-样式-extends-复用","depth":3,"charIndex":11412},{"text":"4. 样式-多态","id":"4-样式-多态","depth":3,"charIndex":12355},{"text":"组件状态","id":"组件状态","depth":2,"charIndex":13999},{"text":"1. 状态-class语法","id":"1-状态-class语法","depth":3,"charIndex":14007},{"text":"2. 状态-复杂状态","id":"2-状态-复杂状态","depth":3,"charIndex":15062},{"text":"界面渲染","id":"界面渲染","depth":2,"charIndex":17043},{"text":"1. 渲染-条件渲染","id":"1-渲染-条件渲染","depth":3,"charIndex":17051},{"text":"2. 渲染-循环渲染","id":"2-渲染-循环渲染","depth":3,"charIndex":18318},{"text":"今日案例-知乎回复","id":"今日案例-知乎回复","depth":2,"charIndex":19492},{"text":"1. 底部输入区域","id":"1-底部输入区域","depth":3,"charIndex":19505},{"text":"2. 静态回复列表","id":"2-静态回复列表","depth":3,"charIndex":21960},{"text":"3. 实现渲染","id":"3-实现渲染","depth":3,"charIndex":23060},{"text":"4. 实现点赞","id":"4-实现点赞","depth":3,"charIndex":27814},{"text":"6. 进行回复","id":"6-进行回复","depth":3,"charIndex":28563}],"domain":"","content":"#\n\n\n开发环境#\n\n\n1. 起步-鸿蒙简介#\n\n介绍：\n\n * HarmonyOS 是新一代的智能终端操作系统，为不同设备的智能化、互联与协同提供了统一的语言。带来简洁，流畅，连续，安全可靠的全场景交互体验。\n\n历程：\n\n时间       事件\n2019     HarmonyOS 1.0，华为在东莞举行华为开发者大会，正式发布操作系统鸿蒙 OS，主要用于物联网\n2020     HarmonyOS 2.0，基于开源项目 OpenHarmony 开发的面向多种全场景智能设备的商用版本\n2021     HarmonyOS 3.0，先后优化游戏流畅度、地图三维体验、系统安全，另外系统的稳定性也得到了增强\n2023.2   HarmonyOS 3.1，系统纯净能力进一步提升，对后台弹窗、 隐藏应用、后台跳转等情况\n2023.7   华为 Mate 50 系列手机获推 HarmonyOS 4.0\n2024     HarmonyOS Next 即将发布，将不在兼容安卓应用\n\n和我们有什么关系？\n\n * 环境弱行业卷，怎么办？\n * 纯鸿蒙应用开发潮，你跟不跟？\n * 前端技术迁移鸿蒙开发易上手，你学不学？\n\n\n2. 起步-DevEco Studio#\n\n安装 DevEco Studio 编辑器\n\n 1. 下载：https://developer.harmonyos.com/cn/develop/deveco-studio#download\n    * Windows(64-bit)\n    * Mac(X86)\n    * Mac(ARM)\n 2. 安装：DevEco Studio → 一路 Next\n 3. 运行：\n    * 基础安装：Node.js >= 16.9.1 + Install ohpm 鸿蒙包管理器\n    * SDK 安装\n    * 安装完毕\n\n\n3. 起步-HelloWorld#\n\n创建一个空项目:\n\n 1. Create Project\n\n 2. 选择项目模板\n\n 3. 填写项目信息\n\n 4. Finish\n\n\n4. 起步-效果预览#\n\n效果预览方法：\n\n * Previewer 预览模式\n * Local Emulator 本地模拟器\n * Remote Emulator 远程模拟器\n * Remote Device 远程真机\n * Local Device 本地真机\n\n推荐使用\n * Previewer 预览 和 Local Emulator 本地模拟器；\n * 尤其推荐使用 遥遥领先 真机调试；\n\n1）Previewer 预览\n\n> 场景：静态页面（没有组件间数据通信、不涉及到网络请求）\n> \n> 条件：有 @Entry 或 @Preview 装饰器页面\n\n * 预览和审查元素\n\n * 多设备预览\n\n2）Local Emulator 本地模拟器\n\n> 场景：动态页面（几乎全场景，一些无法模拟的硬件功能）\n\n * 新建模拟器\n   \n   一路 Next ...\n\n * 启动模拟器\n\n * 运行项目看效果\n\n * 更改后每次需要（打包 → 卸载 → 安装 → 预览），有没有热更新或者刷新这种预览方式？\n   \n   调试静态页面可以，一旦有了数据变化也需要重启，体验一般~ （学习需要耐心，期待 Next 做的更好~）\n\n其他方式\n * Remote Emulator 远程模拟器\n * Remote Device 远程真机\n * Local Device 本地真机\n\n条件：\n\n * 需要注册华为账号, 点这 https://developer.harmonyos.com/ 然后点击登录页面，去注册吧~\n * 登录之后，需要自动生成签名信息，这个我们后面讲真机调试再给大家演示。\n\n\n5. 起步-工程结构#\n\n> 我们在哪里写代码？\n\nStage 模型\n\n了解App结构关系，等后面我们项目阶段来讲一些工程配置文件作用，现在你要知道：\n\n * entry 是一个 Module 应用包\n\n * entryability 是一个 UIAbility 包含用户界面的应用组件\n\n * pages 是页面\n\n * components 可以是组件\n\n\n组件基础#\n\n\n1. 组件-什么是ArkTS#\n\nArkTS是HarmonyOS优选的主力应用开发语言。ArkTS围绕应用开发在TypeScript（简称TS）生态基础上做了进一步扩展，继承了TS的所有特性，是\nTS的超集。\n\n扩展能力如下：\n\n 1. 基本语法\n    * 定义声明式UI、自定义组件、动态扩展UI元素；\n    * 提供ArkUI系统组件，提供组件事件、方法、属性；\n    * 共同构成 UI 开发主体\n 2. 状态管理\n    * 组件状态、组件数据共享、应用数据共享、设备共享；\n 3. 渲染控制\n    * 条件渲染、循环渲染、数据懒加载；\n\n声明式UI？\n\n问题？通过一段 HTML 标签展示出对应的页面方便，还是使用 document.createElement('tag')创建标签构建页面方便？\n\n * 显然是 HTML , 其实 HTML 本身就是声明式的，通过描述的方式去声明 UI 界面。\n * 一些前端框架也是声明式UI，如 Vue 使用的 tempalte 模板，如 React 使用的 JSX。\n * 在例如现在的 Jetpack Compose SwiftUI Flutter 等APP开发技术也是声明式。\n\n\n2. 基础-组件结构#\n\nArkTS通过装饰器 @Component 和 @Entry 装饰 struct 关键字声明的数据结构，构成一个自定义组件。 自定义组件中提供了一个 build\n函数，开发者需在该函数内以链式调用的方式进行基本的 UI 描述，UI 描述的方法请参考 UI 描述规范。\n\n1）页面组件\n\n@Entry\n@Component\nstruct Index {\n  // 工程默认显示 `Index` 页面组件\n  // build 是声明UI的位置\n  build() {\n    Text('页面组件')\n  }\n}\n\n\n2）自定义组件\n\n\n// 定义 `Footer` 组件\n@Component\nstruct Footer {\n  build() {\n    Text('自定义组件')\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column(){\n      // 使用 `Footer` 组件\n      Footer()\n    }\n  }\n}\n\n\n为了更好维护，自定义组件通常会新建一个文件 Footer.ets，通过模块化语法导出导入(默认|按需)使用。\n\n@Component\nexport default struct Footer {\n  build() {\n    Text('自定义组件')\n  }\n}\n\n\n\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column(){\n      // 使用 `Footer` 组件\n      Footer()\n    }\n  }\n}\n\n\nTIP\n * @Entry @Component 是页面组件，将来需要页面跳转就需要再定义一个页面。\n * @Component 自定义组件，一个页面组件下可以有多个自定义组件。\n * build(){} 只能有一个根元素\n\n\n3. 基础-系统组件(ArkUI)#\n\n常用系统组件 Text Column Row Button TextInput 更多组件\n\n * Text 文本组件\n * Column 列组件，纵向排列，Flex布局主轴是Y\n * Row 行组件，横向向排列，Flex布局主轴是X\n * Button 按钮组件\n * InputText 输入框组件\n\n实现一个简易登录界面：\n\n@Entry\n@Component\nstruct Index {\n\n  build() {\n    Column(){\n      Row(){\n        Text('手机号')\n        TextInput()\n      }\n      Row(){\n        Text('验证码')\n        TextInput()\n      }\n      Row(){\n        Button('重置').backgroundColor('#ccc')\n        Button('登录')\n      }\n    }\n  }\n}\n\n\nTIP\n * ArkUI 组件一般都是 Flex 模式，大部分布局可以由行和列组成。\n\n\n4. 基础-组件状态#\n\n> 如何使用 @State 定义一个状态变量？\n\n1）组件变量，不具备驱动UI更新能力。\n\n@Entry\n@Component\nstruct Index {\n  count = 100\n\n  build() {\n    Text(this.count.toString())\n      .onClick(() => this.count++)\n  }\n}\n\n\n2）状态变量，指驱动UI更新的数据，加上 @State 装饰器即可，注意：加上类型和初始值。\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  count: number = 100\n\n  build() {\n    Text(this.count.toString())\n      .onClick(() => this.count++)\n  }\n}\n\n\nTIP\n * 加上类型和初始值\n * 状态变量不可设置的类型有：any undefined null 与复杂类型的联合类型\n\n其他：\n\n * 绑定事件在系统组件后链式使用 onXxxxx 进行绑定即可\n * 使用 @ohos.promptAction 可以进行轻提示 promptAction.showToast({ message: 'Tip' })\n\n📕📕📕 练习案例→实现登录表单数据收集、重置、模拟提交。\n\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  mobile: string = ''\n  @State\n  code: string = ''\n\n  build() {\n    Column(){\n      Row(){\n        Text('手机号')\n        TextInput({ text: this.mobile })\n          .onChange((value)=>this.mobile = value)\n      }\n      Row(){\n        Text('验证码')\n        TextInput({ text: this.code })\n          .onChange((value)=>this.code = value)\n      }\n      Row(){\n        Button('重置')\n          .backgroundColor('#ccc')\n          .onClick(()=>{\n            this.mobile = ''\n            this.code = ''\n          })\n        Button('登录')\n          .onClick(()=>{\n            if (this.mobile && this.code) {\n              promptAction.showToast({ message: `${this.mobile} 登录成功` })\n            } else {\n              promptAction.showToast({ message: `请输入手机号或验证码` })\n            }\n          })\n      }\n    }\n  }\n}\n\n\n\n样式处理#\n\n\n1. 样式-语法(链式&枚举)#\n\n> ArkTS以声明方式组合和扩展组件来描述应用程序的UI；\n> \n> 同时还提供了基本的属性、事件和子组件配置方法，帮助开发者实现应用交互逻辑。\n\n1）样式属性\n\n * 属性方法以 . 链式调用的方式配置系统组件的样式和其他属性，建议每个属性方法单独写一行。\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Text('演示')\n      .backgroundColor('red')\n      .fontSize(50)\n      .width('100%')\n      .height(100)\n  }\n}\n\n\n2）枚举值\n\n * 对于系统组件，ArkUI还为其属性预定义了一些枚举类型。文档链接\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Text('演示')\n      .fontSize(50)\n      .width('100%')\n      .height(100)\n      .backgroundColor(Color.Blue)\n      .textAlign(TextAlign.Center)\n      .fontColor(Color.White)\n  }\n}\n\n\nTIP\n * 样式相关属性通过链式函数的方式进行设置\n * 如果类型是枚举的，通过枚举传入对应的值\n\n\n2. 样式-单位vp和适配#\n\n> 知道 vp 单位，以及适配思想\n\n1） vp 是什么？virtual pixel\n\n * 屏幕密度相关像素，根据屏幕像素密度转换为屏幕物理像素，当数值不带单位时，默认单位 vp；在实际宽度为1440物理像素的屏幕上，1vp 约等于\n   3px（物理像素）\n\n * 上图的意思是，使用这个单位在不同屏幕物理分辨率的实际尺寸一致(A设备1英寸，B设备1英寸)。\n\n2）之前 vw 、rem 和 rpx 相对于屏幕宽度的单位，可以实现等比例适配，vp 可以吗？\n\n\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Text('演示')\n      .width('100%')\n      .backgroundColor('red')\n      .onAreaChange((oldArea, newArea) => {\n        promptAction.showToast({\n          // 1. onAreaChange改变尺寸后会触发\n          // 2. newArea为现在元素尺寸\n          message: newArea.width.toString()\n        })\n      })\n  }\n}\n\n\n我们发现：不同的设备屏幕的宽度 vp 是不一致的，那怎么适配呢？\n\n3）根据官方的文档，结合自己的理解，采用：伸缩布局，网格系统，栅格系统进行布局适配。\n\n伸缩 layoutWeight(flex: number) 占剩余空间多少份，可以理解成CSS的 flex: 1\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Row(){\n      Text('left')\n        .layoutWeight(1)\n        .backgroundColor('red')\n      Text('right')\n        .layoutWeight(2)\n        .backgroundColor('green')\n    }\n    .width('100%')\n  }\n}\n\n\n等比例，设置元素宽高比 aspectRatio(ratio: number)\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Text('left')\n      .width('50%')\n        // 宽高比例\n      .aspectRatio(1)\n      .backgroundColor('red')\n  }\n}\n\n\nTIP\n * vp 是鸿蒙默认单位，和屏幕像素有关，最终表现视觉大小在任何设备一致\n * 鸿蒙一般以伸缩 layoutWeight、网格、栅格进行布局适配，如要等比例缩放可以设置高宽比 aspectRatio\n\n📕📕📕 练习案例→实现知乎评论回复-评论区域\n\n设计稿一般是1080px：(这里没有设计稿，提供了一些尺寸)\n\n * Nav\n   * 左侧返回按钮24vp高宽背景颜色#f5f5f5，图标12vp尺寸颜色#848484\n   * 标题18vp\n * Comment\n   * 头像尺寸32vp高宽，右侧间距10vp\n   * 标题15vp，颜色默认\n   * 内容16vp，颜色#565656\n   * 底部12vp，颜色#c3c4c5\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column(){\n      // 导航\n      Row(){\n        Row(){\n          Image($r('app.media.ic_public_arrow_left'))\n            .width(16)\n            .aspectRatio(1)\n            // svg 图标可以使用填充颜色\n            // .fillColor('red')\n        }\n        .width(24)\n        .aspectRatio(1)\n        .backgroundColor('#f5f5f5')\n        .borderRadius(12)\n        .justifyContent(FlexAlign.Center)\n        .margin({ left: 16 })\n\n        Text('评论回复')\n          .layoutWeight(1)\n          .textAlign(TextAlign.Center)\n          .padding({ right: 40 })\n      }\n      .height(40)\n      .border({ width: { bottom: 0.5 }, color: '#e4e4e4' })\n      // 评论\n      Row(){\n        Image($r('app.media.avatar'))\n          .width(32)\n          .aspectRatio(1)\n          .borderRadius(16)\n        Column({ space: 5 }){\n          Text('周杰伦')\n            .width('100%')\n            .fontWeight(FontWeight.Bold)\n            .fontSize(15)\n          Text('大理石能雕刻出肌肉和皮肤的质感，那个年代的工匠好牛啊')\n            .width('100%')\n          Row(){\n            Text('10-21 · IP属地北京')\n              .fontSize(12)\n              .fontColor('#c3c4c5')\n            Row({ space: 4 }){\n              Image($r('app.media.ic_public_heart'))\n                .width(14)\n                .aspectRatio(1)\n                .fillColor('#c3c4c5')\n              Text('100')\n                .fontSize(12)\n                .fontColor('#c3c4c5')\n            }\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.SpaceBetween)\n        }\n        .layoutWeight(1)\n        .padding({ left: 10 })\n      }\n      .padding(15)\n      .alignItems(VerticalAlign.Top)\n    }\n  }\n}\n\n\nTIP\n * 华为官方图标下载 链接\n\n\n2. 样式-@Styles 复用#\n\n> 在开发过程中会出现大量代码在进行重复样式设置，@Styles 可以帮我们进行样式复用\n\n * 当前 @Styles 仅支持 通用属性 和 通用事件。\n * 支持 全局 定义和 组件内 定义，同时存在组件内覆盖全局生效。\n\n// 全局\n@Styles \nfunction functionName() { ... }\n\n@Entry\n@Component\nsturt Index{\n  // 组件内\n  @Styles \n  functionName() { ... }\n\n  build() {\n    Text('Text')\n      .functionName()\n  }\n}\n\n\n需求：文字和按钮相同背景，点击+1\n\n1）全局\n\n@Styles function sameStyle() {\n  .backgroundColor(Color.Green)\n  .onClick(() => {\n    this.count++\n  })\n}\n\n@Entry\n@Component\nstruct Index {\n  @State\n  count: number = 10\n\n  build() {\n    Column() {\n      Text(this.count.toString())\n        .width(100)\n        .height(50)\n        .margin({ bottom: 10 })\n        .textAlign(TextAlign.Center)\n        .sameStyle()\n\n      Button('+1')\n        .sameStyle()\n    }\n    .height('100%')\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n2）组件内\n\n@Entry\n@Component\nstruct Index {\n  @State\n  count: number = 10\n\n  // 不需要 `function` 关键字，覆盖全局\n  @Styles\n  sameStyle (){\n    .backgroundColor(Color.Pink)\n    .onClick(() => {\n      this.count += 10\n    })\n  }\n\n  build() {\n    Column() {\n      Text(this.count.toString())\n        .width(100)\n        .height(50)\n        .margin({ bottom: 10 })\n        .textAlign(TextAlign.Center)\n        .sameStyle()\n\n      Button('+1')\n        .sameStyle()\n    }\n    .height('100%')\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n📕📕📕 练习案例-登录表单-样式优化\n\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  mobile: string = ''\n  @State\n  code: string = ''\n\n\n  @Styles\n  inputStyle () {\n    .border({ width: 1, color: Color.Gray })\n    .layoutWeight(1)\n    .margin({ left: 10, bottom: 10, top: 10 })\n    .backgroundColor(Color.White)\n  }\n\n  build() {\n    Column(){\n      Row(){\n        Text('手机号')\n        TextInput({ text: this.mobile })\n          .inputStyle()\n          .onChange((value)=>this.mobile = value)\n      }\n      Row(){\n        Text('验证码')\n        TextInput({ text: this.code })\n          .inputStyle()\n          .onChange((value)=>this.code = value)\n      }\n      Row({ space: 15 }){\n        Button('重置')\n          .backgroundColor('#ccc')\n          .onClick(()=>{\n            this.mobile = ''\n            this.code = ''\n          })\n        Button('登录')\n          .onClick(()=>{\n            if (this.mobile && this.code) {\n              promptAction.showToast({ message: `${this.mobile} 登录成功` })\n            } else {\n              promptAction.showToast({ message: `请输入手机号或验证码` })\n            }\n          })\n      }\n    }\n    .padding({ left: 15, right: 15 })\n  }\n}\n\n\n\n3. 样式-@Extends 复用#\n\n> @Extend 用于扩展原生组件样式，通过传参提供更灵活的样式复用\n\n * 使用 @Extend 装饰器修饰的函数只能是 全局\n * 函数可以进行 传参，如果参数是状态变量，状态更新后会刷新UI\n * 且参数可以是一个函数，实现复用事件且可处理不同逻辑\n\n// 全局  原生组件                     参数\n//  ↓     ↓                          ↓ \n@Extend(Text) function functionName(w: number) { \n  .width(w)\n}\n\n\n需求：把 Text 改成按钮样式，且绑定 click 事件执行不同逻辑\n\n\n\n@Extend(Text) function myClick(color: string, cb: () => void) {\n  .backgroundColor(color)\n  .width(100)\n  .height(50)\n  .textAlign(TextAlign.Center)\n  .borderRadius(25)\n  .onClick(() => cb())\n}\n\n@Entry\n@Component\nstruct Other {\n  @State\n  color: string = '#ccc'\n\n  build() {\n    Column({ space: 20 }) {\n      Text('Text1')\n        .myClick(this.color, () => {\n          this.color = '#069'\n        })\n      Text('Text2')\n        .myClick('green', () => {\n          promptAction.showToast({ message: '做其他事~' })\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n\n4. 样式-多态#\n\n> stateStyles() 可以依据组件的内部状态的不同，快速设置不同样式。\n\nstateStyles 是属性方法，可以根据UI内部状态来设置样式，类似于 css 伪类，但语法不同。ArkUI 提供以下四种状态：\n\n * focused：获焦态。\n\n * normal：正常态。\n\n * pressed：按压态。\n\n * disabled：不可用态。\n\n\n\n// 胶囊按钮\n@Extend(Text)\nfunction capsule(){\n  .height(40)\n  .borderRadius(20)\n  .backgroundColor(Color.Gray)\n  .padding({ left: 15, right: 15 })\n  .margin({ bottom: 15 })\n}\n\n@Entry\n@Component\nstruct Index {\n  @State\n  disabled: boolean = false\n  @State\n  focused: boolean = false\n\n  build() {\n    Column() {\n\n      // Button TextInput 默认开启获取焦点，页面中默认第一个这样的元素获取焦点\n      // Button 比较多限制，一个是默认开启获取焦点能看，二是禁用状态下样式无法修改\n      // Button('Button').focusable(false)\n\n      Text('toggle disabled：' + this.disabled)\n        .capsule()\n        .onClick(()=>{\n          this.disabled = !this.disabled\n        })\n      Text('toggle focused：' + this.focused)\n        .capsule()\n        .onClick(()=>{\n          this.focused = !this.focused\n        })\n      Text('clickMe')\n        .capsule()\n        .enabled(!this.disabled)\n        .focusable(this.focused)\n        .onClick(() => {\n          promptAction.showToast({ message: 'click' })\n        })\n        .fontColor('#fff')\n        .stateStyles({\n          normal: {\n            .backgroundColor(Color.Blue)\n          },\n          focused: {\n            .backgroundColor(Color.Red)\n          },\n          disabled: {\n            .backgroundColor(Color.Black)\n          },\n          pressed: {\n            .backgroundColor(Color.Orange)\n          }\n        })\n    }\n  }\n}\n\n\nTIP\n * 使用比较多的应该是 normal pressed 结合下的按压效果\n * enabled(true|false) 开启|禁用 focusable(true|false) 开启获取焦点能力|关闭\n\n注意：\n\n * 页面初始化的时候，默认第一个能获取焦点的元素，会自动获取焦点\n\n\n组件状态#\n\n\n1. 状态-class语法#\n\n> 在鸿蒙开发中关于对象状态范式采用 class 方式，后续组件传值遇到深层对象嵌套需要利用 class\n\n1）class 创建对象和 class 类型\n\nclass Person {\n  age: number;\n  name: string;\n\n  constructor(name: string, age: number) {\n    this.name = name\n    this.age = age\n  }\n}\n\n// 当类型使用和构当造函数使用\nconst p: Person = new Person('jack', 18)\n// 当类型使用这种使用后续居多，我们使用字面量对象居多，可以省略 constructor\nconst p1: Person = {\n  name: 'tom',\n  age: 20\n}\n\n\n2）implements 实现 interface 接口\n\ninterface IPerson {\n  name: string,\n  age: number,\n  say: () => void\n}\n\n// 实现 IPerson 接口，需要符合接口约定\nclass Person implements IPerson{\n  age: number;\n  name: string;\n\n  constructor(name: string, age: number) {\n    this.name = name\n    this.age = age\n  }\n\n  say () {\n    promptAction.showToast({ message: this.name })\n  }\n}\n\n\n3）extends 继承\n\nclass HmPerson extends Person {\n  github: string = 'https://github.com/zhousg'\n\n  coding () {\n    promptAction.showToast({ message: this.name + ': coding' })\n  }\n}\n\n\nTIP\n * 定义类 class 类名 { 属性 + 构造器 + 方法 }，类可以创建对象，也可以当类型使用。\n\n扩展：\n\n * class 可以实现 implements 接口，需要受到接口约束\n * class 可以继承 extends 另外一个class的属性和方法\n\n\n2. 状态-复杂状态#\n\n> 当装饰的数据类型为class或者Object时，可以观察到自身的赋值的变化，和其属性赋值的变化，即Object.keys(observedObject)返回\n> 的所有属性。\n\n1）对象类型状态\n\n// 对象模型\nclass User {\n  nickname: string\n  age: number\n}\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  user: User = { nickname: 'jack', age: 18 }\n\n  build() {\n    Column({ space: 20 }){\n      Text(this.user.nickname)\n      Text(this.user.age.toString())\n      Button('age++')\n        .onClick(() => {\n          this.user.age ++\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n2）嵌套对象类型状态\n\n// 对象模型\nclass User {\n  nickname: string\n  age: number\n}\n\nclass UserData {\n  code: number\n  message: string\n  // 嵌套对象\n  data: User\n}\n\n@Entry\n@Component\nstruct Index {\n  @State\n  res: UserData = {\n    code: 10000,\n    message: '获取用户信息成功',\n    // 嵌套对象\n    data: { nickname: 'jack', age: 18 }\n  }\n\n  build() {\n    Column({ space: 20 }) {\n      Text(this.res.data.nickname)\n      Text(this.res.data.age.toString())\n      Button('age++')\n        .onClick(() => {\n          // ❌ this.res.data.age ++\n          const user = this.res.data\n          // 替换属性，触发UI更新\n          this.res.data = { ...user, age: user.age + 1 }\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n3）对象数组类型状态\n\n// 对象模型\nclass User {\n  nickname: string\n  age: number\n}\n\n@Entry\n@Component\nstruct Index {\n  @State\n  list: User[] = [\n    { nickname: 'jack', age: 18 },\n    { nickname: 'tom', age: 16 }\n  ]\n  build() {\n    Column({ space: 20 }) {\n      Text(JSON.stringify(this.list[0]))\n      Text(JSON.stringify(this.list[1]))\n      Button('age++')\n        .onClick(() => {\n          // ❌ this.list[1].age ++\n          const user = this.list[1]\n          this.list[1] = { ...user, age: user.age + 1 }\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\nTIP\n * 使用 class 来约束对象类型，和嵌套对象和对象数组。\n * 嵌套对象和对象数组，采用赋值的方式进行更新，可以更新UI。\n * 🚦 后期如果学习组件传值，会给大家补充另外一种深层数据变更更新UI的方式\n\n\n界面渲染#\n\n\n1. 渲染-条件渲染#\n\n> 条件渲染可根据应用的不同状态，使用if、else和else if渲染对应状态下的UI内容。\n\n * 条件渲染，是根据状态数据进行判断展示不同UI\n * 条件渲染，是会销毁和创建组件，组件状态将不会保留\n\n1）使用 if else 实现 loading 效果\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  loading: boolean = false\n\n  build() {\n    Column({ space: 20 }){\n      if (this.loading) {\n        LoadingProgress()\n          .width(100)\n          .height(100)\n      } else  {\n        Text('后台数据')\n        Text('后台数据')\n        Text('后台数据')\n      }\n      Button('更新数据')\n        .onClick(() => {\n          this.loading = true\n          setTimeout(() => {\n            this.loading = false\n          }, 2000)\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n2）添加渲染会销毁和重新创建组件，组件状态将不会保留。\n\n@Component\nstruct CounterComp {\n  @State\n  count: number = 0\n\n  build() {\n    Text(this.count.toString())\n      .onClick(() => {\n        this.count ++\n      })\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  show: boolean = true\n\n  build() {\n    Column({ space: 20 }){\n      if (this.show) {\n        // 累计的 count 切换时候不会保留\n        CounterComp()\n      }\n      Button('toggle')\n        .onClick(() => {\n          this.show = !this.show\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n\n2. 渲染-循环渲染#\n\n> ForEach 接口基于数组类型数据来进行循环渲染，需要与容器组件配合使用。\n\n语法：\n\nForEach(\n  // 数据源\n  arr: Array,\n  // 组件生成函数\n  itemGenerator: (item: Array, index?: number) => void,\n  // 键值生成函数\n  keyGenerator?: (item: Array, index?: number): string => string\n)\n\n\n应用：\n\nclass User {\n  id: string\n  name: string\n  age: number\n}\n\n\n@Entry\n@Component\nstruct Index {\n  @State\n  userList: User[] = []\n\n  build() {\n    Scroll() {\n      Column({ space: 20 }) {\n        // 循环渲染\n        ForEach(\n          // 1. 数据源\n          this.userList,\n          // 2. 组件生成函数\n          (item: User) => {\n            // 内容\n            Text(`${item.name} 今年 ${item.age} 岁`)\n          },\n          // 3. 键值生成函数\n          item => item.id\n        )\n        Button('加载更多')\n          .onClick(() => {\n            const arr: User[] = []\n            for (let index = 0; index < 10; index++) {\n              arr.push({ id: Math.random().toString(), name: 'jack', age: Math.ceil(Math.random() * 100) })\n            }\n            this.userList.push(...arr)\n          })\n      }\n    }\n    .width('100%')\n  }\n}\n\n\nTIP\n\n关于 keyGenerator 键生成函数的一些建议：\n\n * 不能缺省\n * 避免最终生成的键包含 index\n * 对象数组，建议使用对象中 id 唯一标识\n * 基本数据数字，建议转换成具有 id 唯一标识的对象，再使用\n\n\n今日案例-知乎回复#\n\n\n1. 底部输入区域#\n\n * 抽离 Nav Comment 组件\n * 使用 Stack 组件底部输入框固定在下方\n * 加上 Scroll 将来页面内容可以滚动\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      Column() {\n        Scroll() {\n          Column() {\n            // 导航\n            NavComp()\n            // 评论\n            CommentComp()\n            // 分割线\n            Divider()\n              .strokeWidth(8)\n              .color('#f5f5f5')\n            // 回复列表\n            \n          }\n          .padding({ bottom: 50 })\n        }\n      }\n      .width('100%')\n      .height('100%')\n\n      Row({ space: 15 }){\n        TextInput({ placeholder: '回复~' })\n          .layoutWeight(1)\n        Text('发布')\n          .fontColor('#069')\n      }\n      .padding({ left: 15, right: 15 })\n      .width('100%')\n      .height(50)\n      .backgroundColor('#fff')\n      .border({ width: { top: 0.5 }, color: '#e4e4e4' })\n    }\n\n  }\n}\n\n// 导航\n@Component\nstruct NavComp {\n  build() {\n    Row() {\n      Row() {\n        Image($r('app.media.ic_public_arrow_left'))\n          .width(16)\n          .aspectRatio(1)\n        // svg 图标可以使用填充颜色\n        // .fillColor('red')\n      }\n      .width(24)\n      .aspectRatio(1)\n      .backgroundColor('#f5f5f5')\n      .borderRadius(12)\n      .justifyContent(FlexAlign.Center)\n      .margin({ left: 16 })\n\n      Text('评论回复')\n        .layoutWeight(1)\n        .textAlign(TextAlign.Center)\n        .padding({ right: 40 })\n    }\n    .height(40)\n    .border({ width: { bottom: 0.5 }, color: '#e4e4e4' })\n  }\n}\n\n// 评论\n@Component\nstruct CommentComp {\n  build() {\n    Row() {\n      Image($r('app.media.avatar'))\n        .width(32)\n        .aspectRatio(1)\n        .borderRadius(16)\n      Column({ space: 5 }) {\n        Text('周杰伦')\n          .width('100%')\n          .fontWeight(FontWeight.Bold)\n          .fontSize(15)\n        Text('大理石能雕刻出肌肉和皮肤的质感，那个年代的工匠好牛啊')\n          .width('100%')\n        Row() {\n          Text('10-21 · IP属地北京')\n            .fontSize(12)\n            .fontColor('#c3c4c5')\n          Row({ space: 4 }) {\n            Image($r('app.media.ic_public_heart'))\n              .width(14)\n              .aspectRatio(1)\n              .fillColor('#c3c4c5')\n            Text('100')\n              .fontSize(12)\n              .fontColor('#c3c4c5')\n          }\n        }\n        .width('100%')\n        .justifyContent(FlexAlign.SpaceBetween)\n      }\n      .layoutWeight(1)\n      .padding({ left: 10 })\n    }\n    .padding(15)\n    .alignItems(VerticalAlign.Top)\n  }\n}\n\n\n\n2. 静态回复列表#\n\n * 参考评论组件，使用 ForEach 循环相同的回复容器\n\nColumn() {\n  Text('回复 100')\n    .width('100%')\n    .fontWeight(600)\n  ForEach([1, 2, 3, 4, 5, 6, 7], () => {\n    Row() {\n      Image($r('app.media.avatar'))\n        .width(32)\n        .aspectRatio(1)\n        .borderRadius(16)\n      Column({ space: 5 }) {\n        Text('周杰伦')\n          .width('100%')\n          .fontWeight(FontWeight.Bold)\n          .fontSize(15)\n        Text('大理石能雕刻出肌肉和皮肤的质感，那个年代的工匠好牛啊')\n          .width('100%')\n        Row() {\n          Text('10-21 · IP属地北京')\n            .fontSize(12)\n            .fontColor('#c3c4c5')\n          Row({ space: 4 }) {\n            Image($r('app.media.ic_public_heart'))\n              .width(14)\n              .aspectRatio(1)\n              .fillColor('#c3c4c5')\n            Text('100')\n              .fontSize(12)\n              .fontColor('#c3c4c5')\n          }\n        }\n        .width('100%')\n        .justifyContent(FlexAlign.SpaceBetween)\n      }\n      .layoutWeight(1)\n      .padding({ left: 10 })\n    }\n    .padding({ top: 15, bottom: 15 })\n    .alignItems(VerticalAlign.Top)\n  })\n\n}\n.padding(15)\n\n\n\n3. 实现渲染#\n\n * 使用 class 定义好回复数据模型 ReplyItem\n * 初始化一些模拟数据\n * 完成页面渲染\n\nexport class ReplyItem {\n  id: number\n  avatar: string\n  author: string\n  content: string\n  time: string\n  area: string\n  likeNum: number\n  likeFlag?: boolean\n}\n\nexport const replyList: ReplyItem[] = [\n  {\n    id: 1,\n    avatar: 'https://picx.zhimg.com/027729d02bdf060e24973c3726fea9da_l.jpg?source=06d4cd63',\n    author: '偏执狂-妄想家',\n    content: '更何况还分到一个摩洛哥[惊喜]',\n    time: '11-30',\n    area: '海南',\n    likeNum: 34\n  },\n  {\n    id: 2,\n    avatar: 'https://pic1.zhimg.com/v2-5a3f5190369ae59c12bee33abfe0c5cc_xl.jpg?source=32738c0c',\n    author: 'William',\n    content: '当年希腊可是把1：0发挥到极致了',\n    time: '11-29',\n    area: '北京',\n    likeNum: 58\n  },\n  {\n    id: 3,\n    avatar: 'https://picx.zhimg.com/v2-e6f4605c16e4378572a96dad7eaaf2b0_l.jpg?source=06d4cd63',\n    author: 'Andy Garcia',\n    content: '欧洲杯其实16队球队打正赛已经差不多，24队打正赛意味着正赛阶段在小组赛一样有弱队。',\n    time: '11-28',\n    area: '上海',\n    likeNum: 10\n  },\n  {\n    id: 4,\n    avatar: 'https://picx.zhimg.com/v2-53e7cf84228e26f419d924c2bf8d5d70_l.jpg?source=06d4cd63',\n    author: '正宗好鱼头',\n    content: '确实眼红啊，亚洲就没这种球队，让中国队刷',\n    time: '11-27',\n    area: '香港',\n    likeNum: 139\n  },\n  {\n    id: 5,\n    avatar: 'https://pic1.zhimg.com/v2-eeddfaae049df2a407ff37540894c8ce_l.jpg?source=06d4cd63',\n    author: '柱子哥',\n    content: '我是支持扩大的，亚洲杯欧洲杯扩到32队，世界杯扩到64队才是好的，世界上有超过200支队伍，欧洲区55支队伍，亚洲区47支队伍，即使如此也就六成出现率',\n    time: '11-27',\n    area: '旧金山',\n    likeNum: 29\n  },\n  {\n    id: 6,\n    avatar: 'https://picx.zhimg.com/v2-fab3da929232ae911e92bf8137d11f3a_l.jpg?source=06d4cd63',\n    author: '飞轩逸',\n    content: '禁止欧洲杯扩军之前，应该先禁止世界杯扩军，或者至少把亚洲名额一半给欧洲。',\n    time: '11-26',\n    area: '里约',\n    likeNum: 100\n  }\n]\n\n\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  replyList: ReplyItem[] = replyList\n\n  build() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      Column() {\n        Scroll() {\n          Column() {\n            // 导航\n            NavComp()\n            // 评论\n            CommentComp()\n            // 分割线\n            Divider()\n              .strokeWidth(8)\n              .color('#f5f5f5')\n            // 回复列表\n            Column() {\n              Text('回复 100')\n                .width('100%')\n                .fontWeight(600)\n              ForEach(\n                this.replyList, \n                (item: ReplyItem) => {\n                  Row() {\n                    Image(item.avatar)\n                      .width(32)\n                      .aspectRatio(1)\n                      .borderRadius(16)\n                    Column({ space: 5 }) {\n                      Text(item.author)\n                        .width('100%')\n                        .fontWeight(FontWeight.Bold)\n                        .fontSize(15)\n                      Text(item.content)\n                        .width('100%')\n                      Row() {\n                        Text(`${item.time} · IP属地${item.area}`)\n                          .fontSize(12)\n                          .fontColor('#c3c4c5')\n                        Row({ space: 4 }) {\n                          Image($r('app.media.ic_public_heart'))\n                            .width(14)\n                            .aspectRatio(1)\n                            .fillColor('#c3c4c5')\n                          Text(item.likeNum.toString())\n                            .fontSize(12)\n                            .fontColor('#c3c4c5')\n                        }\n                      }\n                      .width('100%')\n                      .justifyContent(FlexAlign.SpaceBetween)\n                    }\n                    .layoutWeight(1)\n                    .padding({ left: 10 })\n                  }\n                  .padding({ top: 15, bottom: 15 })\n                  .alignItems(VerticalAlign.Top)\n                },\n                // key 有默认你规则\n                // key 为了元素复用\n                // 如果没有写，会自动生成一个key，index_ + JSON.stringify(item)，不建议不写\n                // (item: ReplyItem) => item.id.toString() 写一个ID做唯一标识，需要key也更新才能更新对应UI\n                // item => id + likeNum + likeFlag 把需要更新的字段合在一起当做key\n                // ({ id, likeNum, likeFlag }) => JSON.stringify({ id, likeNum, likeFlag })\n\n                // 学习了 @Observed @ObjectLink 这样也可以更新~\n                // (item: ReplyItem) => item.id.toString()\n              )\n\n            }\n            .padding(15)\n          }\n          .padding({ bottom: 50 })\n        }\n      }\n      .width('100%')\n      .height('100%')\n\n      Row({ space: 15 }){\n        TextInput({ placeholder: '回复~' })\n          .layoutWeight(1)\n        Text('发布')\n          .fontColor('#069')\n      }\n      .padding({ left: 15, right: 15 })\n      .width('100%')\n      .height(50)\n      .backgroundColor('#fff')\n      .border({ width: { top: 0.5 }, color: '#e4e4e4' })\n    }\n\n  }\n}\n\n\n\n4. 实现点赞#\n\n * 注册点赞区域点击事件\n * 通过索引复制的方式完成数据的更新和UI的更新\n\nonLike(item: ReplyItem) {\n  const reply = { ...item }\n  if (reply.likeFlag) {\n    reply.likeNum--\n    reply.likeFlag = false\n    promptAction.showToast({ message: '取消点赞' })\n  } else {\n    reply.likeNum++\n    reply.likeFlag = true\n    promptAction.showToast({ message: '点赞成功' })\n  }\n  const index = this.replyList.findIndex(rep => rep.id === reply.id)\n  this.replyList[index] = reply\n}\n\n\nRow({ space: 4 }) {\n  Image($r('app.media.heart'))\n    .width(14)\n    .height(14)\n    .fillColor(item.likeFlag ? '#ff6600' : '#c3c4c5')\n    .margin({ right: 4 })\n  Text(item.likeNum.toString())\n    .fontSize(14)\n    .fontColor(item.likeFlag ? '#ff6600' : '#c3c4c5')\n}\n.onClick(() => {\n  this.onLike(item)\n})\n\n\n\n6. 进行回复#\n\n * 收集输入框数据\n * 发布评论内容，和情况输入内容\n * 需要扩展头像类型兼容 Resource 类型\n\nexport class ReplyItem {\n  id: number\n+  avatar: string | Resource\n  author: string\n  content: string\n  time: string\n  area: string\n  likeNum: number\n  likeFlag?: boolean\n}\n\n\nonReply () {\n  const reply: ReplyItem = {\n    id: this.replyList[this.replyList.length-1].id + 1,\n    content: this.content,\n    author: 'Zhousg',\n    avatar: $r('app.media.avatar'),\n    time: '12-01',\n    likeNum: 0,\n    area: '北京'\n  }\n  this.replyList.unshift(reply)\n  this.content = ''\n  promptAction.showToast({ message: '回复成功' })\n}\n\n\nRow({ spcae: 15 }) {\n  TextInput({ placeholder: '回复~', text: this.content })\n    .placeholderColor('#c3c4c5')\n    .layoutWeight(1)\n    .onChange((value) => {\n      this.content = value\n    })\n  Text('发布')\n    .fontSize(14)\n    .fontColor('#09f')\n    .onClick(()=>{\n      this.onReply()\n    })\n}\n","frontmatter":{"title":"HM - 鸿蒙-组件基础"},"version":""},{"id":2,"title":"HM - 鸿蒙-状态管理","routePath":"/interview-handbook-project/guide/state","lang":"","toc":[{"text":"自定义构建函数","id":"自定义构建函数","depth":2,"charIndex":3},{"text":"1. 构建函数-@Builder","id":"1-构建函数-builder","depth":3,"charIndex":14},{"text":"2. 构建函数-传参传递","id":"2-构建函数-传参传递","depth":3,"charIndex":3172},{"text":"3. 构建函数-@BuilderParam 传递UI","id":"3-构建函数-builderparam-传递ui","depth":3,"charIndex":5542},{"text":"4. 构建函数-系统组件自定义UI","id":"4-构建函数-系统组件自定义ui","depth":3,"charIndex":8867},{"text":"组件状态共享","id":"组件状态共享","depth":2,"charIndex":10250},{"text":"1. 状态共享-父子单向","id":"1-状态共享-父子单向","depth":3,"charIndex":10260},{"text":"2. 状态共享-父子双向","id":"2-状态共享-父子双向","depth":3,"charIndex":10985},{"text":"3. 状态共享-后代组件","id":"3-状态共享-后代组件","depth":3,"charIndex":12326},{"text":"4. 状态共享-状态监听器","id":"4-状态共享-状态监听器","depth":3,"charIndex":13200},{"text":"5. @Observed与@ObjectLink","id":"5-observed与objectlink","depth":3,"charIndex":14003},{"text":"应用状态","id":"应用状态","depth":2,"charIndex":21199},{"text":"1. UIAbility内状态-LocalStorage","id":"1-uiability内状态-localstorage","depth":3,"charIndex":21207},{"text":"2. 应用状态-AppStorage","id":"2-应用状态-appstorage","depth":3,"charIndex":24218},{"text":"3. 状态持久化-PersistentStorage","id":"3-状态持久化-persistentstorage","depth":3,"charIndex":26404},{"text":"4. 设备环境-Environment","id":"4-设备环境-environment","depth":3,"charIndex":27969},{"text":"网络管理","id":"网络管理","depth":2,"charIndex":28551},{"text":"1. 应用权限","id":"1-应用权限","depth":3,"charIndex":28559},{"text":"2. HTTP请求","id":"2-http请求","depth":3,"charIndex":29006},{"text":"今日案例-美团外卖","id":"今日案例-美团外卖","depth":2,"charIndex":33426},{"text":"1. 页面结构-入口页面","id":"1-页面结构-入口页面","depth":3,"charIndex":33457},{"text":"2. 页面结构-底部组件","id":"2-页面结构-底部组件","depth":3,"charIndex":33816},{"text":"3. 页面结构-导航组件","id":"3-页面结构-导航组件","depth":3,"charIndex":35129},{"text":"4. 页面结构-商品菜单和商品列表","id":"4-页面结构-商品菜单和商品列表","depth":3,"charIndex":36417},{"text":"5. 页面结构-购物车","id":"5-页面结构-购物车","depth":3,"charIndex":39343},{"text":"6. 业务逻辑-渲染商品菜单和列表","id":"6-业务逻辑-渲染商品菜单和列表","depth":3,"charIndex":41564},{"text":"7. 业务逻辑-加入购物车","id":"7-业务逻辑-加入购物车","depth":3,"charIndex":45423},{"text":"7. 业务逻辑-购物车管理","id":"7-业务逻辑-购物车管理","depth":3,"charIndex":46911}],"domain":"","content":"#\n\n\n自定义构建函数#\n\n\n1. 构建函数-@Builder#\n\n> ArkUI还提供了一种更轻量的UI元素复用机制 @Builder，可以将重复使用的UI元素抽象成一个方法，在 build 方法里调用。\n\n * 组件内定义\n * 全局定义\n\n1）组件内定义\n\n@Builder MyBuilderFunction() {}\n\n\nthis.MyBuilderFunction()\n\n\n2）全局定义\n\n@Builder function MyGlobalBuilderFunction() {}\n\n\nMyGlobalBuilderFunction()\n\n\n📕📕📕 练习案例→商品详情-更多按钮\n\n * 待实现页面\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      GridRow({ columns: 2, gutter: 15 }) {\n        GridCol({ span: 2 }) {\n          Column() {\n            Row() {\n              Text('评价（2000+）')\n                .layoutWeight(1)\n                .fontWeight(600)\n              // TODO\n            }\n            .padding(10)\n\n            Row()\n              .height(100)\n          }\n          .borderRadius(12)\n          .backgroundColor('#fff')\n        }\n\n        GridCol() {\n          Column() {\n            Row() {\n              Text('推荐')\n                .layoutWeight(1)\n                .fontWeight(600)\n              // TODO\n            }\n            .padding(10)\n\n            Row()\n              .height(100)\n          }\n          .borderRadius(12)\n          .backgroundColor('#fff')\n        }\n\n        GridCol() {\n          Column() {\n            Row() {\n              Text('体验')\n                .layoutWeight(1)\n                .fontWeight(600)\n              // TODO\n            }\n            .padding(10)\n\n            Row()\n              .height(100)\n          }\n          .borderRadius(12)\n          .backgroundColor('#fff')\n        }\n      }\n    }\n    .height('100%')\n    .padding(15)\n    .backgroundColor('#f5f5f5')\n  }\n}\n\n\n * 使用 @Builder 提取UI结构\n\n@Entry\n@Component\nstruct Index {\n\n  @Builder\n  MoreBuilder () {\n    Row() {\n      Text('查看更多')\n        .fontSize(14)\n        .fontColor('#666666')\n      Image($r('app.media.ic_public_arrow_right'))\n        .width(16)\n        .fillColor('#666666')\n    }\n  }\n\n  build() {\n    Column() {\n      GridRow({ columns: 2, gutter: 15 }) {\n        GridCol({ span: 2 }) {\n          Column() {\n            Row() {\n              Text('评价（2000+）')\n                .layoutWeight(1)\n                .fontWeight(600)\n              this.MoreBuilder()\n            }\n            .padding(10)\n\n            Row()\n              .height(100)\n          }\n          .borderRadius(12)\n          .backgroundColor('#fff')\n        }\n\n        GridCol() {\n          Column() {\n            Row() {\n              Text('推荐')\n                .layoutWeight(1)\n                .fontWeight(600)\n              this.MoreBuilder()\n            }\n            .padding(10)\n\n            Row()\n              .height(100)\n          }\n          .borderRadius(12)\n          .backgroundColor('#fff')\n        }\n\n        GridCol() {\n          Column() {\n            Row() {\n              Text('体验')\n                .layoutWeight(1)\n                .fontWeight(600)\n              this.MoreBuilder()\n            }\n            .padding(10)\n\n            Row()\n              .height(100)\n          }\n          .borderRadius(12)\n          .backgroundColor('#fff')\n        }\n      }\n    }\n    .height('100%')\n    .padding(15)\n    .backgroundColor('#f5f5f5')\n  }\n}\n\n\nTIP\n\n小结：\n\n * 遇到非遍历情况下，一个组件分散着相同的UI结构，可以使用 @Builder 更轻量\n\n其他：\n\n * GridRow GridCol 栅格布局\n\n\n2. 构建函数-传参传递#\n\n1）按值传递（场景：构建不同的UI）\n\n@Builder MyBuilderFunction( title: string ) {}\n\n\nthis.MyBuilderFunction('Title')\n\n\n需求：不同板块查看更多文案不一样\n\n * 评价 好评率 98%\n\n * 推荐 查看全部\n\n * 体验 4 条测评\n\n  @Builder\n  MoreBuilder (title: string) {\n    Row() {\n      Text(title)\n        .fontSize(14)\n        .fontColor('#666666')\n      Image($r('app.media.ic_public_arrow_right'))\n        .width(16)\n        .fillColor('#666666')\n    }\n  }\n\n\nthis.MoreBuilder('好评率 98%')\nthis.MoreBuilder('查看全部')\nthis.MoreBuilder('4 条测评')\n\n\n2）引用传递（场景：当传递的数据更新，需要更新UI）\n\n需求：\n\n * 点击按钮后模拟加载好评率数据\n\n@Entry\n@Component\nstruct Index {\n  @State\n  rate: number = 0\n\n  @Builder\n  MoreBuilder(params: { title: string }) {\n    Row() {\n      Text(params.title)\n        .fontSize(14)\n        .fontColor('#666666')\n      Image($r('app.media.ic_public_arrow_right'))\n        .width(16)\n        .fillColor('#666666')\n    }\n  }\n\n  build() {\n    Column() {\n      Button('获取数据')\n        .margin({ bottom: 15 })\n        .onClick(() => {\n          this.rate = 99\n        })\n      GridRow({ columns: 2, gutter: 15 }) {\n        GridCol({ span: 2 }) {\n          Column() {\n            Row() {\n              Text('评价（2000+）')\n                .layoutWeight(1)\n                .fontWeight(600)\n              this.MoreBuilder({ title: `好评率 ${this.rate} %` })\n            }\n            .padding(10)\n\n            Row()\n              .height(100)\n          }\n          .borderRadius(12)\n          .backgroundColor('#fff')\n        }\n\n        GridCol() {\n          Column() {\n            Row() {\n              Text('推荐')\n                .layoutWeight(1)\n                .fontWeight(600)\n              this.MoreBuilder({ title: '查看全部' })\n            }\n            .padding(10)\n\n            Row()\n              .height(100)\n          }\n          .borderRadius(12)\n          .backgroundColor('#fff')\n        }\n\n        GridCol() {\n          Column() {\n            Row() {\n              Text('体验')\n                .layoutWeight(1)\n                .fontWeight(600)\n              this.MoreBuilder({ title: '4 条测评' })\n            }\n            .padding(10)\n\n            Row()\n              .height(100)\n          }\n          .borderRadius(12)\n          .backgroundColor('#fff')\n        }\n      }\n    }\n    .height('100%')\n    .padding(15)\n    .backgroundColor('#f5f5f5')\n  }\n}\n\n\nTIP\n * 使用 @Builder 复用逻辑的时候，支持传参可以更灵活的渲染UI\n * 参数可以使用状态数据，不过建议通过对象的方式传入 @Builder\n\n\n3. 构建函数-@BuilderParam 传递UI#\n\n> @BuilderParam 该装饰器用于声明任意UI描述的一个元素，类似 slot 占位符\n\n前置知识\n\n组件属性初始化：\n\n * 定义组件声明属性 title: string\n * 使用组件初始化属性 Comp({ title: string })\n\n * 尾随闭包初始化组件\n   \n   * 组件内有且仅有一个使用 @BuilderParam 装饰的属性\n\n * 参数初始化组件\n   \n   * 组件内有多个使用 @BuilderParam 装饰器属性\n\n1）尾随闭包初始化组件(默认插槽)\n\n需求：\n\n * 标题文字和更多文案通过属性传入\n\n * 内容结构需要传入\n\n@Component\nstruct PanelComp {\n  title: string\n  more: string\n  @BuilderParam\n  panelContent: () => void = this.DefaultPanelContent\n\n  // 备用 Builder\n  @Builder\n  DefaultPanelContent () {\n    Text('默认内容')\n  }\n\n  build() {\n    Column() {\n      Row() {\n        Text(this.title)\n          .layoutWeight(1)\n          .fontWeight(600)\n        Row() {\n          Text(this.more)\n            .fontSize(14)\n            .fontColor('#666666')\n          Image($r('app.media.ic_public_arrow_right'))\n            .width(16)\n            .fillColor('#666666')\n        }\n      }\n      .padding(10)\n\n      Row() {\n        this.panelContent()\n      }\n      .height(100)\n    }\n    .borderRadius(12)\n    .backgroundColor('#fff')\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      GridRow({ columns: 2, gutter: 15 }) {\n        GridCol({ span: 2 }) {\n          PanelComp({ title: '评价（2000+）', more: '好评率98%' })\n        }\n\n        GridCol() {\n          PanelComp({ title: '推荐', more: '查看全部' }){\n            Text('推荐内容')\n          }\n        }\n\n        GridCol() {\n          PanelComp({ title: '体验', more: '4 条测评' }){\n            Text('体验内容')\n          }\n        }\n      }\n    }\n    .height('100%')\n    .padding(15)\n    .backgroundColor('#f5f5f5')\n  }\n}\n\n\n2）参数初始化组件（具名插槽）\n\n需求：需要传入内容结构和底部结构\n\n@Component\nstruct PanelComp {\n  title: string\n  more: string\n  @BuilderParam\n  panelContent: () => void\n  @BuilderParam\n  panelFooter: () => void\n\n  build() {\n    Column() {\n      Row() {\n        Text(this.title)\n          .layoutWeight(1)\n          .fontWeight(600)\n        Row() {\n          Text(this.more)\n            .fontSize(14)\n            .fontColor('#666666')\n          Image($r('app.media.ic_public_arrow_right'))\n            .width(16)\n            .fillColor('#666666')\n        }\n      }\n      .padding(10)\n\n      Row() {\n        this.panelContent()\n      }\n      .height(100)\n      Row() {\n        this.panelFooter()\n      }\n      .height(50)\n    }\n    .borderRadius(12)\n    .backgroundColor('#fff')\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  @Builder\n  ContentBuilderA() {\n    Text('评价内容')\n  }\n  @Builder\n  FooterBuilderA() {\n    Text('评价底部')\n  }\n\n  build() {\n    Column() {\n      GridRow({ columns: 2, gutter: 15 }) {\n        GridCol({ span: 2 }) {\n          PanelComp({\n            title: '评价（2000+）',\n            more: '好评率98%',\n            panelFooter: this.FooterBuilderA,\n            panelContent: this.ContentBuilderA\n          })\n        }\n\n        // GridCol() {\n        //   PanelComp({ title: '推荐', more: '查看全部' }){\n        //     Text('推荐内容')\n        //   }\n        // }\n        //\n        // GridCol() {\n        //   PanelComp({ title: '体验', more: '4 条测评' }){\n        //     Text('体验内容')\n        //   }\n        // }\n      }\n    }\n    .height('100%')\n    .padding(15)\n    .backgroundColor('#f5f5f5')\n  }\n}\n\n\nTIP\n * 当子组件使用一个 @BuilderParam 的时候，使用组件的时候在尾随 {} 插入UI结构\n * 当子组件使用多个 @BuilderParam 的时候，使用组件的时候 Comp({ xxx: this.builderFn }) 传入\n * 子组件本身可以提供一个默认的 @Builder 函数作为 @BuilderParam 备用函数，当做备用内容使用\n\n\n4. 构建函数-系统组件自定义UI#\n\n> 在一些系统组件中，根据配置无法达到预期UI，可以使用 @Builder 构建函数自定义UI，前提该组件支持自定义。\n\n需求：自定义 Tabs 组件的 TabBar UI结构\n\nclass ToolBarItem {\n  defaultIcon: string | Resource\n  activeIcon: string | Resource\n  label: string\n}\n\n@Entry\n@Component\nstruct Index {\n  @State\n  activeIndex: number = 0\n  toolBars: ToolBarItem[] = [\n    { defaultIcon: $r('app.media.home'), activeIcon: $r('app.media.home_select'), label: '首页' },\n    { defaultIcon: $r('app.media.project'), activeIcon: $r('app.media.project_select'), label: '项目' },\n    { defaultIcon: $r('app.media.interview'), activeIcon: $r('app.media.interview_select'), label: '面经' },\n    { defaultIcon: $r('app.media.mine'), activeIcon: $r('app.media.mine_select'), label: '我的' }\n  ]\n\n  @Builder\n  TabBarBuilder(item: ToolBarItem, index: number) {\n    Column() {\n      Image(this.activeIndex === index ? item.activeIcon : item.defaultIcon)\n        .width(24)\n      Text(item.label)\n        .fontSize(12)\n        .margin({ top: 4 })\n        .lineHeight(12)\n        .fontColor(this.activeIndex === index ? '#000' : '#aaa')\n    }\n  }\n\n  build() {\n    Tabs() {\n      ForEach(this.toolBars, (item: ToolBarItem, index: number) => {\n        TabContent() {\n          Text(index.toString())\n        }\n        .tabBar(this.TabBarBuilder(item, index))\n      })\n    }\n    .barPosition(BarPosition.End)\n    .onChange(index => this.activeIndex = index)\n  }\n}\n\n\n\n组件状态共享#\n\n\n1. 状态共享-父子单向#\n\n> @Prop 装饰的变量可以和父组件建立单向的同步关系。@Prop 装饰的变量是可变的，但是变化不会同步回其父组件。\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  money: number = 0\n\n  build() {\n    Column({ space: 20 }){\n      Text('父组件：' + this.money)\n        .onClick(() => {\n          this.money ++\n        })\n      Child({ money: this.money })\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n@Component\nstruct Child {\n\n  @Prop\n  money: number\n\n  build() {\n    Text('子组件：' + this.money)\n      .onClick(() => {\n        this.money ++\n      })\n  }\n}\n\n\nTIP\n * 支持类型 string、number、boolean、enum 类型\n * 子组件可修改 Prop 数据值，但不同步到父组件，父组件更新后覆盖子组件 Prop 数据\n * 子组件可以初始化默认值，注意：目前编译器会提示错误，请忽略，下个版本将修复\n\n\n2. 状态共享-父子双向#\n\n> 子组件中被@Link装饰的变量与其父组件中对应的数据源建立双向数据绑定。\n\n1）简单类型 string、number、boolean、enum\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  money: number = 0\n\n  build() {\n    Column({ space: 20 }){\n      Text('父组件：' + this.money)\n        .onClick(() => {\n          this.money ++\n        })\n      Child({ money: $money })\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n@Component\nstruct Child {\n\n  @Link\n  money: number\n\n  build() {\n    Text('子组件：' + this.money)\n      .onClick(() => {\n        this.money ++\n      })\n  }\n}\n\n\n2）复杂类型 Object、class\n\nclass Person {\n  name: string\n  age: number\n}\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  person: Person = { name: 'jack', age: 18 }\n\n  build() {\n    Column({ space: 20 }){\n      Text('父组件：' + `${this.person.name} 今年 ${ this.person.age } 岁`)\n        .onClick(() => {\n          this.person.age ++\n        })\n      Child({ person: $person })\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Center)\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n@Component\nstruct Child {\n\n  @Link\n  person: Person\n\n  build() {\n    Text('子组件：' +  `${this.person.name} 今年 ${ this.person.age } 岁`)\n      .onClick(() => {\n        this.person.age ++\n      })\n  }\n}\n\n\nTIP\n * 父组件传值的时候需要 this. 改成 $，子组件 @Link 修饰数据\n\n\n3. 状态共享-后代组件#\n\n> @Provide 和 @Consume，应用于与后代组件的双向数据同步，应用于状态数据在多个层级之间传递的场景。\n\n1）通过相同的变量名绑定\n\n@Entry\n@Component\nstruct Index {\n  @Provide\n  money: number = 0\n\n  build() {\n    Column({ space: 20 }) {\n      Text('父组件：' + this.money)\n        .onClick(() => {\n          this.money++\n        })\n      Parent()\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n@Component\nstruct Parent {\n  @Consume\n  money: number\n\n  build() {\n    Column({ space: 20 }) {\n      Text('父组件：' + this.money)\n        .onClick(() => {\n          this.money++\n        })\n      Child()\n    }\n  }\n}\n\n@Component\nstruct Child {\n  @Consume\n  money: number\n\n  build() {\n    Text('子组件：' + this.money)\n      .onClick(() => {\n        this.money++\n      })\n  }\n}\n\n\nTIP\n * Object、class、string、number、boolean、enum 类型均支持\n * 通过相同的变量别名绑定 @Provide('key') 和 @Consume('key') key需要保持一致\n\n\n4. 状态共享-状态监听器#\n\n> 如果开发者需要关注某个状态变量的值是否改变，可以使用 @Watch 为状态变量设置回调函数。\n\n * @State、@Prop、@Link 等装饰器在 @Watch 装饰之前\n\n\n\n@Component\nstruct Child {\n  @Prop\n  @Watch('onActiveIndex')\n  activeIndex: number\n\n  onActiveIndex() {\n    promptAction.showToast({ message: '监听变化' })\n  }\n\n  build() {\n    Column() {\n      Text('Child' + this.activeIndex)\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  @State activeIndex: number = 0\n\n  onChange (index: number) {\n    this.activeIndex = index\n    promptAction.showToast({ message: '点击' })\n  }\n\n  build() {\n    Navigation() {\n      Child({ activeIndex: this.activeIndex })\n    }.toolBar({\n      items: [\n        { value: '首页', action: () => this.onChange(0) },\n        { value: '我的', action: () => this.onChange(1) },\n      ]\n    })\n  }\n}\n\n\nTIP\n * 在第一次初始化的时候，@Watch装饰的方法不会被调用\n\n\n5. @Observed与@ObjectLink#\n\n> 之前我们通过 赋值的方式 修改嵌套对象或对象数组这类复杂数据来更新UI，会影响对象对应所有UI更新； 通过 @Observed 与 @ObjectLink\n> 可以优化这个问题；\n\n使用步骤：\n\n * 类 class 数据模拟需要定义通过构造函数，使用 @Observed 修饰这个类\n\n * 初始化数据：需要通过初始化构造函数的方式添加\n\n * 通过 @ObjectLink 关联对象，可以直接修改被关联对象来更新UI\n\n需求：改造下知乎评论案例\n\n1）定义构造函数和使用@Observed 修饰符，以及初始化数据\n\n@Observed\nexport class ReplyItem {\n  id: number\n  avatar: string | Resource\n  author: string\n  content: string\n  time: string\n  area: string\n  likeNum: number\n  likeFlag?: boolean\n\n  constructor(item: ReplyItem) {\n    for (const key in item) {\n      this[key] = item[key]\n    }\n  }\n}\n\nexport const replyList: ReplyItem[] = [\n  new ReplyItem({\n    id: 1,\n    avatar: 'https://picx.zhimg.com/027729d02bdf060e24973c3726fea9da_l.jpg?source=06d4cd63',\n    author: '偏执狂-妄想家',\n    content: '更何况还分到一个摩洛哥[惊喜]',\n    time: '11-30',\n    area: '海南',\n    likeNum: 34\n  }),\n  new ReplyItem({\n    id: 2,\n    avatar: 'https://pic1.zhimg.com/v2-5a3f5190369ae59c12bee33abfe0c5cc_xl.jpg?source=32738c0c',\n    author: 'William',\n    content: '当年希腊可是把1：0发挥到极致了',\n    time: '11-29',\n    area: '北京',\n    likeNum: 58\n  }),\n  new ReplyItem({\n    id: 3,\n    avatar: 'https://picx.zhimg.com/v2-e6f4605c16e4378572a96dad7eaaf2b0_l.jpg?source=06d4cd63',\n    author: 'Andy Garcia',\n    content: '欧洲杯其实16队球队打正赛已经差不多，24队打正赛意味着正赛阶段在小组赛一样有弱队。',\n    time: '11-28',\n    area: '上海',\n    likeNum: 10\n  }),\n  new ReplyItem({\n    id: 4,\n    avatar: 'https://picx.zhimg.com/v2-53e7cf84228e26f419d924c2bf8d5d70_l.jpg?source=06d4cd63',\n    author: '正宗好鱼头',\n    content: '确实眼红啊，亚洲就没这种球队，让中国队刷',\n    time: '11-27',\n    area: '香港',\n    likeNum: 139\n  }),\n  new ReplyItem({\n    id: 5,\n    avatar: 'https://pic1.zhimg.com/v2-eeddfaae049df2a407ff37540894c8ce_l.jpg?source=06d4cd63',\n    author: '柱子哥',\n    content: '我是支持扩大的，亚洲杯欧洲杯扩到32队，世界杯扩到64队才是好的，世界上有超过200支队伍，欧洲区55支队伍，亚洲区47支队伍，即使如此也就六成出现率',\n    time: '11-27',\n    area: '旧金山',\n    likeNum: 29\n  }),\n  new ReplyItem({\n    id: 6,\n    avatar: 'https://picx.zhimg.com/v2-fab3da929232ae911e92bf8137d11f3a_l.jpg?source=06d4cd63',\n    author: '飞轩逸',\n    content: '禁止欧洲杯扩军之前，应该先禁止世界杯扩军，或者至少把亚洲名额一半给欧洲。',\n    time: '11-26',\n    area: '里约',\n    likeNum: 100\n  })\n]\n\n\n2）嵌套的对象，或者数组中的对象，传入子组件，组件使用 @ObjectLink 修饰符获取数据\n\n\n\n\n\n@Entry\n@Component\nstruct Index {\n  @State\n  replyList: ReplyItem[] = replyList\n  @State\n  content: string = ''\n\n  onReply() {\n    const reply: ReplyItem = new ReplyItem({\n      id: this.replyList[this.replyList.length-1].id + 1,\n      content: this.content,\n      author: 'Zhousg',\n      avatar: $r('app.media.avatar'),\n      time: '12-01',\n      likeNum: 0,\n      area: '北京'\n    })\n    this.replyList.unshift(reply)\n    this.content = ''\n    promptAction.showToast({ message: '回复成功' })\n  }\n\n  build() {\n    Stack() {\n      Scroll() {\n        Column() {\n          NavComp()\n          CommentComp()\n          // space\n          Divider()\n            .strokeWidth(8)\n            .color('#f5f5f5')\n          // reply\n          Column() {\n            Text('回复 7')\n              .width('100%')\n              .margin({ bottom: 15 })\n              .fontWeight(500)\n            ForEach(this.replyList, (item: ReplyItem) => {\n              ReplyComp({ item })\n            })\n          }\n          .padding({ left: 15, right: 15, top: 15 })\n        }\n      }\n      .padding({ bottom: 50 })\n\n      Row() {\n        TextInput({ placeholder: '回复~', text: this.content })\n          .placeholderColor('#c3c4c5')\n          .layoutWeight(1)\n          .onChange((value) => {\n            this.content = value\n          })\n        Text('发布')\n          .fontSize(14)\n          .fontColor('#09f')\n          .margin({ left: 15 })\n          .onClick(() => {\n            this.onReply()\n          })\n      }\n      .width('100%')\n      .height(50)\n      .padding({ left: 15, right: 15 })\n      .position({ y: '100%' })\n      .translate({ y: -50 })\n      .backgroundColor('#fff')\n      .border({ width: { top: 0.5 }, color: '#e4e4e4' })\n    }\n\n  }\n}\n\n@Component\nstruct ReplyComp {\n  @ObjectLink\n  item: ReplyItem\n\n  onLike() {\n    if (this.item.likeFlag) {\n      this.item.likeNum--\n      this.item.likeFlag = false\n      promptAction.showToast({ message: '取消点赞' })\n    } else {\n      this.item.likeNum++\n      this.item.likeFlag = true\n      promptAction.showToast({ message: '点赞成功' })\n    }\n  }\n\n  build() {\n    Row() {\n      Image(this.item.avatar)\n        .width(32)\n        .height(32)\n        .borderRadius(16)\n      Column() {\n        Text(this.item.author)\n          .fontSize(15)\n          .fontWeight(FontWeight.Bold)\n          .margin({ bottom: 5 })\n        Text(this.item.content)\n          .margin({ bottom: 5 })\n          .fontColor('#565656')\n          .lineHeight(20)\n        Row() {\n          Text(`${this.item.time}•IP 属地${this.item.area}`)\n            .layoutWeight(1)\n            .fontSize(14)\n            .fontColor('#c3c4c5')\n          Row() {\n            Image($r('app.media.heart'))\n              .width(14)\n              .height(14)\n              .fillColor(this.item.likeFlag ? '#ff6600' : '#c3c4c5')\n              .margin({ right: 4 })\n            Text(this.item.likeNum.toString())\n              .fontSize(14)\n              .fontColor(this.item.likeFlag ? '#ff6600' : '#c3c4c5')\n          }\n          .onClick(() => {\n            this.onLike()\n          })\n        }\n      }\n      .layoutWeight(1)\n      .padding({ left: 10 })\n      .alignItems(HorizontalAlign.Start)\n    }\n    .width('100%')\n    .padding({ bottom: 15 })\n    .alignItems(VerticalAlign.Top)\n  }\n}\n\n@Component\nstruct NavComp {\n  build() {\n    // nav\n    Row() {\n      Row() {\n        Image($r('app.media.ic_public_arrow_left'))\n          .width(12)\n          .height(12)\n          .fillColor('#848484')\n      }\n      .width(24)\n      .height(24)\n      .borderRadius(12)\n      .backgroundColor('#f5f5f5')\n      .justifyContent(FlexAlign.Center)\n      .margin({ left: 13 })\n\n      Text('评论回复')\n        .padding({ right: 50 })\n        .textAlign(TextAlign.Center)\n        .fontSize(18)\n        .layoutWeight(1)\n    }\n    .height(50)\n\n  }\n}\n\n@Component\nstruct CommentComp {\n  build() {\n    // comment\n    Row() {\n      Image('https://picx.zhimg.com/1754b6bd9_xl.jpg?source=c885d018')\n        .width(32)\n        .height(32)\n        .borderRadius(16)\n      Column() {\n        Text('欧洲足球锦标赛')\n          .fontSize(15)\n          .fontWeight(FontWeight.Bold)\n          .margin({ bottom: 5 })\n        Text('14-0！欧洲杯超级惨案+刷爆纪录！姆巴佩帽子戏法，法国7连胜，怎么评价这场比赛？')\n          .margin({ bottom: 5 })\n          .fontColor('#565656')\n          .lineHeight(20)\n        Row() {\n          Text('10-21•IP 属地辽宁')\n            .layoutWeight(1)\n            .fontSize(14)\n            .fontColor('#c3c4c5')\n          Row() {\n            Image($r('app.media.heart'))\n              .width(14)\n              .height(14)\n              .fillColor('#c3c4c5')\n              .margin({ right: 4 })\n            Text('100')\n              .fontSize(14)\n              .fontColor('#c3c4c5')\n          }\n        }\n      }\n      .layoutWeight(1)\n      .padding({ left: 10 })\n      .alignItems(HorizontalAlign.Start)\n    }\n    .width('100%')\n    .padding({ left: 15, right: 15, bottom: 15 })\n    .alignItems(VerticalAlign.Top)\n  }\n}\n\n\n注意：\n * 对象需要通过构造函数初始化\n * 需要嵌套组件，因为需要使用 @ObjectLink\n\n\n应用状态#\n\n\n1. UIAbility内状态-LocalStorage#\n\n> LocalStorage 是页面级的UI状态存储，通过 @Entry 装饰器接收的参数可以在页面内共享同一个 LocalStorage 实例。\n> LocalStorage 也可以在 UIAbility 内，页面间共享状态。\n\n1）页面内共享\n\n * 创建 LocalStorage 实例：const storage = new LocalStorage({ key: value })\n * 单向 @LocalStorageProp('user') 组件内可变\n * 双向 @LocalStorageLink('user') 全局均可变\n\nclass User {\n  name?: string\n  age?: number\n}\nconst storage = new LocalStorage({\n  user: { name: 'jack', age: 18 }\n})\n\n@Entry(storage)\n@Component\nstruct Index {\n  @LocalStorageProp('user')\n  user: User = {}\n\n  build() {\n    Column({ space: 15 }){\n      Text('Index：')\n      Text(this.user.name + this.user.age)\n      Divider()\n      ChildA()\n      Divider()\n      ChildB()\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n@Component\nstruct ChildA {\n  @LocalStorageProp('user')\n  user: User = {}\n\n  build() {\n    Column({ space: 15 }){\n      Text('ChildA：')\n      Text(this.user.name + this.user.age)\n        .onClick(()=>{\n          this.user.age ++\n        })\n    }\n  }\n}\n\n@Component\nstruct ChildB {\n  @LocalStorageLink('user')\n  user: User = {}\n\n  build() {\n    Column({ space: 15 }){\n      Text('ChildB：')\n      Text(this.user.name + this.user.age)\n        .onClick(()=>{\n          this.user.age ++\n        })\n    }\n  }\n}\n\n\n2）页面间共享\n\n * 在 UIAbility 创建 LocalStorage 通过 loadContent 提供给加载的窗口\n\n * 在页面使用 const storage = LocalStorage.GetShared() 得到实例，通过 @Entry(storage) 传入页面\n\n+  storage = new LocalStorage({\n+    user: { name: 'jack', age: 18 }\n+  })\n\n  onWindowStageCreate(windowStage: window.WindowStage) {\n    // Main window is created, set main page for this ability\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n+    windowStage.loadContent('pages/Index', this.storage , (err, data) => {\n      if (err.code) {\n        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n\n\nexport class User {\n  name?: string\n  age?: number\n}\n\n\n\nconst storage = LocalStorage.GetShared()\n\n@Entry(storage)\n@Component\nstruct Index {\n  @LocalStorageProp('user')\n  user: User = {}\n\n  build() {\n    Column({ space: 15 }) {\n      Text('Index：')\n      Text(this.user.name + this.user.age)\n        .onClick(()=>{\n          this.user.age ++\n        })\n      Navigator({ target: 'pages/OtherPage' }){\n        Text('Go Other Page')\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n\nconst storage = LocalStorage.GetShared()\n\n@Entry(storage)\n@Component\nstruct OtherPage {\n  @LocalStorageLink('user')\n  user: User = {}\n\n  build() {\n    Column({ space: 15 }) {\n      Text('OtherPage：')\n      Text(this.user.name + this.user.age)\n        .onClick(()=>{\n          this.user.age ++\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\nTIP\n * 应用逻辑中使用参考 链接\n\n\n2. 应用状态-AppStorage#\n\n> AppStorage 是应用全局的UI状态存储，是和应用的进程绑定的，由UI框架在应用程序启动时创建，为应用程序UI状态属性提供中央存储。\n\n * 如果是初始化使用 AppStorage.SetOrCreate(key,value)\n * 单向 @StorageProp('user') 组件内可变\n * 双向 @StorageLink('user') 全局均可变\n\n1）通过UI装饰器使用\n\n\n\nAppStorage.SetOrCreate('user', { name: 'jack', age: 18 })\n\n@Entry\n@Component\nstruct Index {\n  @StorageProp('user')\n  // 可忽略，编辑器类型错误\n  user: User = {}\n\n  build() {\n    Column({ space: 15 }) {\n      Text('Index：')\n      Text(this.user.name + this.user.age)\n        .onClick(() => {\n          this.user.age++\n        })\n      Divider()\n      ChildA()\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n@Component\nstruct ChildA {\n  @StorageLink('user')\n  user: User = {}\n\n  build() {\n    Column({ space: 15 }){\n      Text('ChildA：')\n      Text(this.user.name + this.user.age)\n        .onClick(()=>{\n          this.user.age ++\n        })\n    }\n  }\n}\n\n\n2）通过逻辑使用\n\n * AppStorage.Get(key) 获取数据\n * AppStorage.Set(key,value) 覆盖数据\n * const link: SubscribedAbstractProperty = AppStorage.Link(key) 覆盖数据\n   * link.set(value) 修改\n   * link.get() 获取\n\n\n\n\nAppStorage.SetOrCreate('user', { name: 'jack', age: 18 })\n\n@Entry\n@Component\nstruct Index {\n  @StorageLink('user')\n  user: User = {}\n\n  build() {\n    Column({ space: 15 }) {\n      Text('Index：')\n      Text(this.user.name + this.user.age)\n        .onClick(() => {\n          this.user.age++\n        })\n      Divider()\n      Text('Get()')\n        .onClick(() => {\n          // 仅获取\n          const user = AppStorage.Get('user')\n          promptAction.showToast({\n            message: JSON.stringify(user)\n          })\n        })\n      Text('Set()')\n        .onClick(() => {\n          // 直接设置\n          AppStorage.Set('user', {\n            name: 'tom',\n            age: 100\n          })\n          // 观察页面更新没\n        })\n      Text('Link()')\n        .onClick(() => {\n          // 获取user的prop\n          const user: SubscribedAbstractProperty = AppStorage.Link('user')\n          user.set({\n            name: user.get().name,\n            // 获取后修改\n            age: user.get().age + 1\n          })\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n\n3. 状态持久化-PersistentStorage#\n\n> PersistentStorage 将选定的 AppStorage 属性保留在设备磁盘上。\n\nDETAILS\n\nUI和业务逻辑不直接访问 PersistentStorage 中的属性，所有属性访问都是对 AppStorage 的访问，AppStorage\n中的更改会自动同步到 PersistentStorage。\n\nWARNING\n * 支持：number, string, boolean, enum 等简单类型;\n * 如果：要支持对象类型，可以转换成json字符串\n * 持久化变量最好是小于2kb的数据，如果开发者需要存储大量的数据，建议使用数据库api。\n\n1）简单数据类型的持久化，和获取和修改\n\n\n\nPersistentStorage.PersistProp('count', 100)\n\n@Entry\n@Component\nstruct Index {\n  @StorageLink('count')\n  count: number = 0\n\n  build() {\n    Column({ space: 15 }) {\n      Text(this.count.toString())\n        .onClick(() => {\n          this.count++\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n2）复杂数据类型的吃就好，和获取和修改\n\n\n\n\nPersistentStorage.PersistProp('userJson', `{ \"name\": \"jack\", \"age\": 18 }`)\n\n@Entry\n@Component\nstruct Index {\n  @StorageProp('userJson')\n  @Watch('onUpdateUser')\n  userJson: string = '{}'\n  @State\n  user: User = JSON.parse(this.userJson)\n\n  onUpdateUser() {\n    this.user = JSON.parse(this.userJson)\n  }\n\n  build() {\n    Column({ space: 15 }) {\n      Text('Index：')\n      Text(this.user.name + this.user.age)\n        .onClick(() => {\n          this.user.age++\n          // 修改\n          AppStorage.Set('userJson', JSON.stringify(this.user))\n        })\n      Divider()\n      Text('Get()')\n        .onClick(() => {\n          // 获取\n          const user = AppStorage.Get('userJson')\n          promptAction.showToast({ message: user })\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\nTIP\n * 测试：需要在真机或模拟器调试\n\n\n4. 设备环境-Environment#\n\n> 开发者如果需要应用程序运行的设备的环境参数，以此来作出不同的场景判断，比如多语言，暗黑模式等，需要用到 Environment 设备环境查询。\n\n * Environment 的所有属性都是不可变的（即应用不可写入），所有的属性都是简单类型。\n\n\n// 获取系统语言\nconst lang = i18n.getSystemLanguage()\n// 设置环境状态\nEnvironment.EnvProp('lang', lang);\n\n@Entry\n@Component\nstruct Index{\n  @StorageProp('lang')\n  lang: string = ''\n\n  build() {\n    Column() {\n      Text(this.lang)\n        .onClick(()=>{\n          // 不能修改\n          // Environment.EnvProp('lang', 'en');\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\nTIP\n * 测试：需要在真机或模拟器调试\n\n\n网络管理#\n\n\n1. 应用权限#\n\n> ATM (AccessTokenManager) 是HarmonyOS上基于AccessToken构建的统一的应用权限管理能力。\n\n应用权限保护的对象可以分为数据和功能：\n\n * 数据包含了个人数据（如照片、通讯录、日历、位置等）、设备数据（如设备标识、相机、麦克风等）、应用数据。\n\n * 功能则包括了设备功能（如打电话、发短信、联网等）、应用功能（如弹出悬浮框、创建快捷方式等）等。\n\n根据授权方式的不同，权限类型可分为system_grant（系统授权）和user_grant（用户授权）。\n\n * 配置文件权限声明\n\n * 向用户申请授权\n\n例如：访问网络需要联网权限\n\n{\n  \"module\" : {\n    // ...\n    \"requestPermissions\":[\n      {\n        \"name\" : \"ohos.permission.INTERNET\"\n      }\n    ]\n  }\n}\n\n\nTIP\n * 应用权限列表\n\n\n2. HTTP请求#\n\n1）启动 json-server 服务，npm i json-server -g 全局安装。\n\n * 新建 data.json 文件在任意目录，比如 server 文件夹\n\n{\n  \"takeaway\": [\n    {\n      \"tag\": \"318569657\",\n      \"name\": \"一人套餐\",\n      \"foods\": [\n        {\n          \"id\": 8078956697,\n          \"name\": \"烤羊肉串(10串)\",\n          \"like_ratio_desc\": \"好评度100%\",\n          \"month_saled\": 40,\n          \"unit\": \"10串\",\n          \"food_tag_list\": [\n            \"点评网友推荐\"\n          ],\n          \"price\": 90,\n          \"picture\": \"https://zqran.gitee.io/images/waimai/8078956697.jpg\",\n          \"description\": \"\",\n          \"tag\": \"318569657\",\n          \"count\": 1\n        },\n        {\n          \"id\": 7384994864,\n          \"name\": \"腊味煲仔饭\",\n          \"like_ratio_desc\": \"好评度81%\",\n          \"month_saled\": 100,\n          \"unit\": \"1人份\",\n          \"food_tag_list\": [],\n          \"price\": 39,\n          \"picture\": \"https://zqran.gitee.io/images/waimai/7384994864.jpg\",\n          \"description\": \"\",\n          \"tag\": \"318569657\",\n          \"count\": 1\n        },\n        {\n          \"id\": 2305772036,\n          \"name\": \"鸡腿胡萝卜焖饭\",\n          \"like_ratio_desc\": \"好评度91%\",\n          \"month_saled\": 300,\n          \"unit\": \"1人份\",\n          \"food_tag_list\": [],\n          \"price\": 34.32,\n          \"picture\": \"https://zqran.gitee.io/images/waimai/2305772036.jpg\",\n          \"description\": \"主料：大米、鸡腿、菜心、胡萝卜\",\n          \"tag\": \"318569657\",\n          \"count\": 1\n        },\n        {\n          \"id\": 2233861812,\n          \"name\": \"小份酸汤莜面鱼鱼+肉夹馍套餐\",\n          \"like_ratio_desc\": \"好评度73%\",\n          \"month_saled\": 600,\n          \"unit\": \"1人份\",\n          \"food_tag_list\": [\n            \"“口味好,包装很好～点赞”\"\n          ],\n          \"price\": 34.32,\n          \"picture\": \"https://zqran.gitee.io/images/waimai/2233861812.jpg\",\n          \"description\": \"酸汤莜面鱼鱼，主料：酸汤、莜面 肉夹馍，主料：白皮饼、猪肉\",\n          \"tag\": \"318569657\",\n          \"count\": 1\n        }\n      ]\n    },\n    {\n      \"tag\": \"82022594\",\n      \"name\": \"特色烧烤\",\n      \"foods\": [\n        {\n          \"id\": 3823780596,\n          \"name\": \"藤椒鸡肉串\",\n          \"like_ratio_desc\": \"\",\n          \"month_saled\": 200,\n          \"unit\": \"10串\",\n          \"food_tag_list\": [\n            \"点评网友推荐\"\n          ],\n          \"price\": 6,\n          \"picture\": \"https://zqran.gitee.io/images/waimai/3823780596.jpg\",\n          \"description\": \"1串。藤椒味，主料：鸡肉\",\n          \"tag\": \"82022594\",\n          \"count\": 1\n        },\n        {\n          \"id\": 6592009498,\n          \"name\": \"烤羊排\",\n          \"like_ratio_desc\": \"\",\n          \"month_saled\": 50,\n          \"unit\": \"1人份\",\n          \"food_tag_list\": [],\n          \"price\": 169,\n          \"picture\": \"https://zqran.gitee.io/images/waimai/6592009498.jpg\",\n          \"description\": \"6-8个月草原羔羊肋排，烤到皮脆肉香\",\n          \"tag\": \"82022594\",\n          \"count\": 1\n        }\n      ]\n    },\n    {\n      \"tag\": \"98147100\",\n      \"name\": \"杂粮主食\",\n      \"foods\": [\n        {\n          \"id\": 4056954171,\n          \"name\": \"五常稻花香米饭\",\n          \"like_ratio_desc\": \"\",\n          \"month_saled\": 1000,\n          \"unit\": \"约300克\",\n          \"food_tag_list\": [],\n          \"price\": 5,\n          \"picture\": \"https://zqran.gitee.io/images/waimai/4056954171.jpg\",\n          \"description\": \"浓浓的稻米清香，软糯Q弹有嚼劲\",\n          \"tag\": \"98147100\",\n          \"count\": 1\n        },\n        {\n          \"id\": 740430262,\n          \"name\": \"小米发糕(3个)\",\n          \"like_ratio_desc\": \"好评度100%\",\n          \"month_saled\": 100,\n          \"unit\": \"3块\",\n          \"food_tag_list\": [],\n          \"price\": 13,\n          \"picture\": \"https://zqran.gitee.io/images/waimai/740430262.jpg\",\n          \"description\": \"柔软蓬松，葡萄干和蔓越莓酸甜适口\",\n          \"tag\": \"98147100\",\n          \"count\": 1\n        },\n        {\n          \"id\": 7466390504,\n          \"name\": \"沙枣玉米窝头(3个)\",\n          \"like_ratio_desc\": \"好评度100%\",\n          \"month_saled\": 100,\n          \"unit\": \"3个\",\n          \"food_tag_list\": [],\n          \"price\": 13,\n          \"picture\": \"https://zqran.gitee.io/images/waimai/7466390504.jpg\",\n          \"description\": \"\",\n          \"tag\": \"98147100\",\n          \"count\": 1\n        }\n      ]\n    }\n  ]\n}\n\n\n * 进入 server 文件夹，按照下面命令启动接口服务器，查看本机IP ipconfig | ifconfig\n\njson-server data.json --host 192.168.0.1\n\n\n2）使用 @ohos.net.http 模块发请求\n\nconst req = http.createHttp()\n\nreq.request('http://192.168.0.1:3000/takeaway')\n  .then(res => {\n    const data = JSON.parse(res.result as string)\n    console.log(data.length)  // === 3  注意：字符长度大于1024字节，控制台不可见。\n  })\n  .catch(err => {\n    console.error('MEITU', err.message)\n  })\n\n\n\n今日案例-美团外卖#\n\n商品页   购物车\n      \n\n\n1. 页面结构-入口页面#\n\n\n\n\n\n\n@Entry\n@Component\nstruct Index {\n\n  @State\n  showCart: boolean = false\n\n  build() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      Column() {\n        Nav()\n        MenuWrapper()\n      }\n      .width('100%')\n      .height('100%')\n      if (this.showCart) {\n        Cart()\n      }\n      Footer({ showCart: $showCart })\n    }\n  }\n}\n\n\n\n2. 页面结构-底部组件#\n\n@Component\nexport struct Footer {\n  @Link\n  showCart: boolean\n\n  build() {\n    Row() {\n      Row() {\n        Badge({\n          value: '0',\n          position: BadgePosition.Right,\n          style: { badgeSize: 18 }\n        }) {\n          Image('https://zqran.gitee.io/images/waimai/cart-2.png')\n            .width(47)\n            .height(69)\n            .position({ y: -19 })\n        }\n        .width(50)\n        .height(50)\n        .margin({ left: 25, right: 10 })\n        .onClick(() => {\n          this.showCart = !this.showCart\n        })\n\n        Column() {\n          Text() {\n            Span('¥')\n              .fontColor('#fff')\n              .fontSize(12)\n            Span('0.00')\n              .fontColor('#fff')\n              .fontSize(24)\n          }\n\n          Text('预估另需配送费 ¥5')\n            .fontSize(12)\n            .fontColor('#999')\n        }\n        .layoutWeight(1)\n        .alignItems(HorizontalAlign.Start)\n\n        Text('去结算')\n          .backgroundColor('#f8c74e')\n          .alignSelf(ItemAlign.Stretch)\n          .padding(15)\n          .borderRadius({\n            topRight: 25,\n            bottomRight: 25\n          })\n      }\n      .height(50)\n      .layoutWeight(1)\n      .backgroundColor('#222426')\n      .borderRadius(25)\n    }\n    .padding(15)\n    .height(80)\n  }\n}\n\n\n\n3. 页面结构-导航组件#\n\n@Component\nexport struct Nav {\n  @Builder\n  NavItem(active: boolean, title: string, subTitle?: string) {\n    Column() {\n      Text() {\n        Span(title)\n        if (subTitle) {\n          Span(' ' + subTitle)\n            .fontSize(10)\n            .fontColor(active ? '#000' : '#666')\n        }\n      }.layoutWeight(1)\n      .fontColor(active ? '#000' : '#666')\n      .fontWeight(active ? FontWeight.Bold : FontWeight.Normal)\n\n      Text()\n        .height(1)\n        .width(20)\n        .margin({ left: 6 })\n        .backgroundColor(active ? '#fa0' : 'transparent')\n    }\n    .width(73)\n    .alignItems(HorizontalAlign.Start)\n    .padding({ top: 3 })\n  }\n\n  build() {\n    Row() {\n      this.NavItem(true, '点菜')\n      this.NavItem(false, '评价', '1796')\n      this.NavItem(false, '商家')\n\n      Row() {\n        Image($r('app.media.ic_public_input_search'))\n          .width(14)\n          .aspectRatio(1)\n          .fillColor('#999')\n        Text('请输入菜品名称')\n          .fontSize(12)\n          .fontColor('#999')\n      }\n      .backgroundColor('#eee')\n      .height(25)\n      .borderRadius(13)\n      .padding({ left: 5, right: 5 })\n      .layoutWeight(1)\n    }\n    .padding({ left: 15, right: 15 })\n    .height(40)\n    .border({ width: { bottom: 0.5 }, color: '#e4e4e4' })\n  }\n}\n\n\n\n4. 页面结构-商品菜单和商品列表#\n\n\n\n\n@Component\nexport struct MenuWrapper {\n  list: string[] = ['一人套餐', '特色烧烤', '杂粮主食']\n  @State\n  activeIndex: number = 0\n\n  @Builder\n  TabBarItem(text: string, index: number) {\n    Text(text)\n      .height(50)\n      .width('100%')\n      .textAlign(TextAlign.Center)\n      .fontSize(14)\n      .backgroundColor('#fff')\n  }\n\n  build() {\n    Row() {\n      Column() {\n        ForEach(this.list, (item: string, index: number) => {\n          Text(item)\n            .height(50)\n            .width('100%')\n            .textAlign(TextAlign.Center)\n            .fontSize(14)\n            .backgroundColor(this.activeIndex === index ? '#fff' : '#f5f5f5')\n            .onClick(() => {\n              this.activeIndex = index\n            })\n        })\n      }\n      .width(90)\n\n      List() {\n        ListItem(){\n          MenuWrapperItem()\n        }\n      }\n      .layoutWeight(1)\n      .height('100%')\n      .backgroundColor('#fff')\n    }\n    .layoutWeight(1)\n    .alignItems(VerticalAlign.Top)\n    .backgroundColor('#f5f5f5')\n  }\n}\n\n\n\n\n@Component\nexport struct MenuWrapperItem {\n  build() {\n    Row() {\n      Image('https://zqran.gitee.io/images/waimai/8078956697.jpg')\n        .width(90)\n        .aspectRatio(1)\n      Column({ space: 5 }) {\n        Text('小份酸汤莜面鱼鱼+肉夹馍套餐')\n          .textOverflow({\n            overflow: TextOverflow.Ellipsis,\n          })\n          .maxLines(2)\n          .fontWeight(600)\n        Text('酸汤莜面鱼鱼，主料：酸汤、莜面 肉夹馍，主料：白皮饼、猪肉')\n          .textOverflow({\n            overflow: TextOverflow.Ellipsis,\n          })\n          .maxLines(1)\n          .fontSize(12)\n          .fontColor('#333')\n        Text('点评网友推荐')\n          .fontSize(10)\n          .backgroundColor('#fff5e2')\n          .fontColor('#ff8000')\n          .padding({ top: 2, bottom: 2, right: 5, left: 5 })\n          .borderRadius(2)\n        Text() {\n          Span('月销售40')\n          Span(' ')\n          Span('好评度100%')\n        }\n        .fontSize(12)\n        .fontColor('#999')\n\n        Row() {\n          Text() {\n            Span('¥ ')\n              .fontColor('#ff8000')\n              .fontSize(10)\n            Span('34.23')\n              .fontColor('#ff8000')\n              .fontWeight(FontWeight.Bold)\n          }\n\n          CalcBtn({ icon: $r('app.media.ic_public_add_filled') })\n        }\n        .justifyContent(FlexAlign.SpaceBetween)\n        .width('100%')\n      }\n      .layoutWeight(1)\n      .alignItems(HorizontalAlign.Start)\n      .padding({ left: 10, right: 10 })\n    }\n    .padding(10)\n    .alignItems(VerticalAlign.Top)\n  }\n}\n\n\n@Component\nexport struct CalcBtn {\n\n  icon: Resource\n\n  plain?: boolean\n\n  build() {\n    Row() {\n      Image(this.icon)\n        .width(10)\n        .aspectRatio(1)\n    }\n    .width(16)\n    .aspectRatio(1)\n    .backgroundColor(this.plain ? '#fff' : '#f8c74e')\n    .border(this.plain ? { width: 0.5 , color: '#f8c74e'}: {})\n    .borderRadius(4)\n    .justifyContent(FlexAlign.Center)\n  }\n}\n\n\n\n5. 页面结构-购物车#\n\n\n\n@Component\nexport struct Cart {\n  build() {\n    Column() {\n      Column() {\n        Row() {\n          Text('购物车')\n            .fontSize(12)\n            .fontWeight(600)\n          Text('清空购物车')\n            .fontSize(12)\n            .fontColor('#999')\n        }\n        .width('100%')\n        .height(40)\n        .justifyContent(FlexAlign.SpaceBetween)\n        .border({ width: { bottom: 0.5 }, color: '#f5f5f5' })\n        .margin({ bottom: 10 })\n        .padding({ left: 15, right: 15 })\n\n        List({ space: 30 }) {\n          ListItem() {\n            CartItemComp()\n          }\n\n          ListItem() {\n            CartItemComp()\n          }\n\n          ListItem() {\n            CartItemComp()\n          }\n        }\n        .divider({\n          strokeWidth: 0.5,\n          color: '#f5f5f5'\n        })\n        .padding({ left: 15, right: 15, bottom: 100 })\n      }\n      .backgroundColor('#fff')\n      .borderRadius({\n        topLeft: 16,\n        topRight: 16\n      })\n    }\n    .justifyContent(FlexAlign.End)\n    .height('100%')\n    .backgroundColor('rgba(0,0,0,0.5)')\n  }\n}\n\n\n\n\n@Component\nexport struct CartItemComp {\n  build() {\n    Row() {\n      Image('https://zqran.gitee.io/images/waimai/7384994864.jpg')\n        .width(60)\n        .aspectRatio(1)\n        .borderRadius(8)\n      Column({ space: 5 }) {\n        Text('小份酸汤莜面鱼鱼+肉夹馍套餐')\n          .fontSize(14)\n          .textOverflow({\n            overflow: TextOverflow.Ellipsis\n          })\n          .maxLines(2)\n        Row() {\n          Text() {\n            Span('¥ ')\n              .fontColor('#ff8000')\n              .fontSize(10)\n            Span('34.23')\n              .fontColor('#ff8000')\n              .fontWeight(FontWeight.Bold)\n          }\n\n          Row() {\n            CalcBtn({ icon: $r('app.media.ic_screenshot_line'), plain: true })\n            Text('0')\n              .padding(10)\n              .fontSize(12)\n            CalcBtn({ icon: $r('app.media.ic_public_add_filled') })\n          }\n        }\n        .justifyContent(FlexAlign.SpaceBetween)\n        .width('100%')\n      }\n      .layoutWeight(1)\n      .alignItems(HorizontalAlign.Start)\n      .padding({ left: 10, right: 10 })\n    }\n    .alignItems(VerticalAlign.Top)\n  }\n}\n\n\n\n6. 业务逻辑-渲染商品菜单和列表#\n\n1）定义 model 数据模型\n\n@Observed\nexport class FoodItem {\n  id: number\n  name: string\n  like_ratio_desc: string\n  food_tag_list: string[]\n  price: number\n  picture: string\n  description: string\n  tag: string\n  month_saled: number\n}\n\n@Observed\nexport class Category {\n  tag: string\n  name: string\n  foods: FoodItem[]\n}\n\n\n2）使用 http 发送请求，获取数据\n\n\n\n\n\n\n\n\nconst req = http.createHttp()\n\n@Entry\n@Component\nstruct Index {\n  @State\n  showCart: boolean = false\n\n  @State\n  categoryList: Category[] = []\n\n  aboutToAppear() {\n    req.request('http://172.16.39.26:3000/takeaway')\n      .then(res => {\n        const data = JSON.parse(res.result as string) as Category[]\n        this.categoryList = data\n      })\n      .catch(err => {\n        console.error('MEITU', err.message)\n      })\n  }\n\n  build() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      Column() {\n        Nav()\n        MenuWrapper({ categoryList: $categoryList })\n      }\n      .width('100%')\n      .height('100%')\n\n      if (this.showCart) {\n        Cart()\n      }\n      Footer({ showCart: $showCart })\n    }\n  }\n}\n\n\n3）传入列表数据给，商品菜单组件，进行渲染\n\n\n\n\n@Component\nexport struct MenuWrapper {\n  @Link\n  categoryList: Category[]\n  @State\n  activeIndex: number = 0\n\n  @Builder\n  TabBarItem(text: string, index: number) {\n    Text(text)\n      .height(50)\n      .width('100%')\n      .textAlign(TextAlign.Center)\n      .fontSize(14)\n      .backgroundColor('#fff')\n  }\n\n  build() {\n    Row() {\n      Column() {\n        ForEach(this.categoryList, (item: Category, index: number) => {\n          Text(item.name)\n            .height(50)\n            .width('100%')\n            .textAlign(TextAlign.Center)\n            .fontSize(14)\n            .backgroundColor(this.activeIndex === index ? '#fff' : '#f5f5f5')\n            .onClick(() => {\n              this.activeIndex = index\n            })\n        })\n      }\n      .width(90)\n\n      List() {\n        ForEach(this.categoryList[this.activeIndex]?.foods, (item: FoodItem) => {\n          ListItem() {\n            MenuWrapperItem({ food: item })\n          }\n        })\n      }\n      .layoutWeight(1)\n      .height('100%')\n      .backgroundColor('#fff')\n    }\n    .layoutWeight(1)\n    .alignItems(VerticalAlign.Top)\n    .backgroundColor('#f5f5f5')\n  }\n}\n\n\n\n\n\n@Component\nexport struct MenuWrapperItem {\n\n  @ObjectLink\n  food: FoodItem\n\n  build() {\n    Row() {\n      Image(this.food.picture)\n        .width(90)\n        .aspectRatio(1)\n      Column({ space: 5 }) {\n        Text(this.food.name)\n          .textOverflow({\n            overflow: TextOverflow.Ellipsis,\n          })\n          .maxLines(2)\n          .fontWeight(600)\n        Text(this.food.description)\n          .textOverflow({\n            overflow: TextOverflow.Ellipsis,\n          })\n          .maxLines(1)\n          .fontSize(12)\n          .fontColor('#333')\n        ForEach(this.food.food_tag_list, (tag) => {\n          Text(tag)\n            .fontSize(10)\n            .backgroundColor('#fff5e2')\n            .fontColor('#ff8000')\n            .padding({ top: 2, bottom: 2, right: 5, left: 5 })\n            .borderRadius(2)\n        })\n        Text() {\n          Span('月销售'+this.food.month_saled)\n          Span(' ')\n          Span(this.food.like_ratio_desc)\n        }\n        .fontSize(12)\n        .fontColor('#999')\n\n        Row() {\n          Text() {\n            Span('¥ ')\n              .fontColor('#ff8000')\n              .fontSize(10)\n            Span(this.food.price.toFixed(2))\n              .fontColor('#ff8000')\n              .fontWeight(FontWeight.Bold)\n          }\n\n          CalcBtn({ icon: $r('app.media.ic_public_add_filled') })\n        }\n        .justifyContent(FlexAlign.SpaceBetween)\n        .width('100%')\n      }\n      .layoutWeight(1)\n      .alignItems(HorizontalAlign.Start)\n      .padding({ left: 10, right: 10 })\n    }\n    .padding(10)\n    .alignItems(VerticalAlign.Top)\n  }\n}\n\n\n\n7. 业务逻辑-加入购物车#\n\n1）购物车数据模型\n\n@Observed\nexport class CartItem {\n  id: number\n  name: string\n  price: number\n  picture: string\n  count: number\n}\n\n\n2）购物车添加逻辑\n\n\n\nexport const CART_KEY = 'CART_KEY'\n\nexport const getCart = () => {\n  return JSON.parse(AppStorage.Get(CART_KEY) || '[]') as CartItem[]\n}\n\nexport const addCart = (food: FoodItem) => {\n  const cart = getCart()\n  const f = cart.find(f => f.id === food.id)\n  if (f) {\n    f.count++\n  } else {\n    const { id, price, picture, name } = food\n    cart.unshift({\n      id,\n      price,\n      picture,\n      name,\n      count: 1\n    })\n  }\n  AppStorage.Set(CART_KEY, JSON.stringify(cart))\n}\n\n\n3）购物车状态持久化\n\n\n\n\nPersistentStorage.PersistProp(CART_KEY, '[]')\n\n\n4）监听购物车数据变化，设置购物车状态，底部组件显示数量和总价\n\n  @StorageProp(CART_KEY)\n  @Watch('onUpdateCart')\n  cartJson: string = '[]'\n  @State\n  cart: CartItem[] = JSON.parse(this.cartJson)\n  onUpdateCart () {\n    this.cart = JSON.parse(this.cartJson)\n  }\n\n\nFooter({ showCart: $showCart, cart: $cart })\n\n\n@Link\ncart: CartItem[]\n\n  // ...\n          Badge({\n          value: this.cart.reduce((p, c) => p + c.count, 0) + '',\n          })\n\n  // ...\n          Span(this.cart.reduce((p, c) => p + (c.count * c.price * 100) / 100, 0).toFixed(2))\n          .fontColor('#fff')\n          .fontSize(24)\n\n\n\n5）添加购物车\n\n          CalcBtn({ icon: $r('app.media.ic_public_add_filled') })\n            .onClick(() => {\n              addCart(this.food)\n              promptAction.showToast({ message: '添加购物车成功' })\n            })\n\n\n\n7. 业务逻辑-购物车管理#\n\n1）渲染购物车\n\n      if (this.showCart) {\n        Cart({ cart: $cart })\n      }\n\n\n@Component\nexport struct Cart {\n  @Link\n  cart: CartItem[]\n\n  // ...\n\n          List({ space: 30 }) {\n          ForEach(this.cart, (item:CartItem) => {\n            ListItem() {\n              CartItemComp({ item })\n            }\n          })\n        }\n\n\n\n\n\n@Component\nexport struct CartItemComp {\n\n  @ObjectLink\n  item: CartItem\n\n  build() {\n    Row() {\n      Image(this.item.picture)\n        .width(60)\n        .aspectRatio(1)\n        .borderRadius(8)\n      Column({ space: 5 }) {\n        Text(this.item.name)\n          .fontSize(14)\n          .textOverflow({\n            overflow: TextOverflow.Ellipsis\n          })\n          .maxLines(2)\n        Row() {\n          Text() {\n            Span('¥ ')\n              .fontColor('#ff8000')\n              .fontSize(10)\n            Span(this.item.price.toFixed(2))\n              .fontColor('#ff8000')\n              .fontWeight(FontWeight.Bold)\n          }\n\n          Row() {\n            CalcBtn({ icon: $r('app.media.ic_screenshot_line'), plain: true })\n            Text(this.item.count+'')\n              .padding(10)\n              .fontSize(12)\n            CalcBtn({ icon: $r('app.media.ic_public_add_filled') })\n          }\n        }\n        .justifyContent(FlexAlign.SpaceBetween)\n        .width('100%')\n      }\n      .layoutWeight(1)\n      .alignItems(HorizontalAlign.Start)\n      .padding({ left: 10, right: 10 })\n    }\n    .alignItems(VerticalAlign.Top)\n  }\n}\n\n\n2）购物车数量修改\n\nexport const addCart = (food: FoodItem | CartItem) => { ... }\n\nexport const delCart = (id: number) => {\n  const cart = getCart()\n  const f = cart.find(f => f.id === id)\n  if (f && f.count > 0) {\n    f.count--\n  }\n  AppStorage.Set(CART_KEY, JSON.stringify(cart))\n}\n\n\n            CalcBtn({ icon: $r('app.media.ic_screenshot_line'), plain: true })\n              .onClick(() => {\n                delCart(this.item.id)\n              })\n            Text(this.item.count+'')\n              .padding(10)\n              .fontSize(12)\n            CalcBtn({ icon: $r('app.media.ic_public_add_filled') })\n              .onClick(()=>{\n                addCart(this.item)\n              })\n\n\n3）清空购物车\n\nexport const clearCart  = () => {\n  AppStorage.Set(CART_KEY, '[]')\n}\n\n\n          Text('清空购物车')\n            .fontSize(12)\n            .fontColor('#999')\n            .onClick(() => {\n              clearCart()\n            })\n","frontmatter":{"title":"HM - 鸿蒙-状态管理"},"version":""},{"id":4,"title":"面试宝典APP","routePath":"/interview-handbook-project/project/","lang":"","toc":[],"domain":"","content":"#","frontmatter":{},"version":""}]